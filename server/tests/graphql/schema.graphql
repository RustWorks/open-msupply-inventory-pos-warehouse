type BatchIsReserved implements DeleteSupplierInvoiceLineErrorInterface & UpdateSupplierInvoiceLineErrorInterface {
	description: String!
}
type CanOnlyEditInvoicesInLoggedInStoreError implements DeleteCustomerInvoiceErrorInterface & UpdateCustomerInvoiceErrorInterface {
	description: String!
}
type CannotChangeInvoiceBackToDraft implements UpdateSupplierInvoiceErrorInterface {
	description: String!
}
type CannotChangeStatusBackToDraftError implements UpdateCustomerInvoiceErrorInterface {
	description: String!
}
type CannotDeleteInvoiceWithLines implements DeleteSupplierInvoiceErrorInterface {
	description: String!
	lines: InvoiceLineConnector!
}
type CannotEditFinalisedInvoice implements UpdateSupplierInvoiceErrorInterface & DeleteSupplierInvoiceLineErrorInterface & UpdateSupplierInvoiceLineErrorInterface & InsertSupplierInvoiceLineErrorInterface & DeleteSupplierInvoiceErrorInterface {
	description: String!
}
"""
Generic Error Wrapper
"""
type ConnectorError {
	error: ConnectorErrorInterface!
}
interface ConnectorErrorInterface {
	description: String!
}
type DatabaseError implements DeleteCustomerInvoiceErrorInterface & DeleteSupplierInvoiceErrorInterface & UpdateSupplierInvoiceLineErrorInterface & NodeErrorInterface & InsertCustomerInvoiceErrorInterface & InsertSupplierInvoiceErrorInterface & InsertSupplierInvoiceLineErrorInterface & DeleteSupplierInvoiceLineErrorInterface & ConnectorErrorInterface & UpdateSupplierInvoiceErrorInterface & UpdateCustomerInvoiceErrorInterface {
	description: String!
	fullError: String!
}
"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime
input DatetimeFilterInput {
	equalTo: DateTime
	beforeOrEqualTo: DateTime
	afterOrEqualTo: DateTime
}
type DeleteCustomerInvoiceError {
	error: DeleteCustomerInvoiceErrorInterface!
}
interface DeleteCustomerInvoiceErrorInterface {
	description: String!
}
input DeleteCustomerInvoiceInput {
	id: String!
}
type DeleteCustomerInvoiceOk {
	invoiceId: String!
}
union DeleteCustomerInvoiceResultUnion = | DeleteCustomerInvoiceOk | DeleteCustomerInvoiceError
type DeleteResponse {
	id: String!
}
"""
Generic Error Wrapper
"""
type DeleteSupplierInvoiceError {
	error: DeleteSupplierInvoiceErrorInterface!
}
interface DeleteSupplierInvoiceErrorInterface {
	description: String!
}
input DeleteSupplierInvoiceInput {
	id: String!
}
"""
Generic Error Wrapper
"""
type DeleteSupplierInvoiceLineError {
	error: DeleteSupplierInvoiceLineErrorInterface!
}
interface DeleteSupplierInvoiceLineErrorInterface {
	description: String!
}
input DeleteSupplierInvoiceLineInput {
	id: String!
	invoiceId: String!
}
union DeleteSupplierInvoiceLineResponse = | DeleteSupplierInvoiceLineError | DeleteResponse
union DeleteSupplierInvoiceResponse = | DeleteSupplierInvoiceError | DeleteResponse
input EqualFilterBoolInput {
	equalTo: Boolean
}
input EqualFilterInvoiceStatusInput {
	equalTo: InvoiceNodeStatus
}
input EqualFilterInvoiceTypeInput {
	equalTo: InvoiceNodeType
}
input EqualFilterStringInput {
	equalTo: String
}
type FinalisedInvoiceIsNotEditableError implements UpdateCustomerInvoiceErrorInterface & DeleteCustomerInvoiceErrorInterface {
	description: String!
}
enum ForeignKey {
	OTHER_PARTY_ID
	ITEM_ID
	INVOICE_ID
}
type ForeignKeyError implements InsertSupplierInvoiceLineErrorInterface & UpdateSupplierInvoiceLineErrorInterface & InsertSupplierInvoiceErrorInterface & UpdateSupplierInvoiceErrorInterface & DeleteSupplierInvoiceLineErrorInterface {
	description: String!
	key: ForeignKey!
}
type InsertCustomerInvoiceError {
	error: InsertCustomerInvoiceErrorInterface!
}
interface InsertCustomerInvoiceErrorInterface {
	description: String!
}
input InsertCustomerInvoiceInput {
	otherPartyId: String!
	status: InvoiceNodeStatus
	comment: String
	theirReference: String
}
type InsertCustomerInvoiceOk {
	invoice: InvoiceNode!
}
union InsertCustomerInvoiceResultUnion = | InsertCustomerInvoiceOk | InsertCustomerInvoiceError
"""
Generic Error Wrapper
"""
type InsertSupplierInvoiceError {
	error: InsertSupplierInvoiceErrorInterface!
}
interface InsertSupplierInvoiceErrorInterface {
	description: String!
}
"""
Input Description Main
"""
input InsertSupplierInvoiceInput {
	id: String!
	"""
	Input Descirption Inner
	"""
	otherPartyId: String!
	status: InvoiceNodeStatus!
	comment: String
	theirReference: String
}
"""
Generic Error Wrapper
"""
type InsertSupplierInvoiceLineError {
	error: InsertSupplierInvoiceLineErrorInterface!
}
interface InsertSupplierInvoiceLineErrorInterface {
	description: String!
}
input InsertSupplierInvoiceLineInput {
	id: String!
	invoiceId: String!
	itemId: String!
	packSize: Int!
	batch: String
	costPricePerPack: Float!
	sellPricePerPack: Float!
	expiryDate: NaiveDate
	numberOfPacks: Int!
}
union InsertSupplierInvoiceLineResponse = | InsertSupplierInvoiceLineError | NodeError | InvoiceLineNode
union InsertSupplierInvoiceResponse = | InsertSupplierInvoiceError | NodeError | InvoiceNode
"""
Generic Connector
"""
type InvoiceConnector {
	totalCount: Int!
	nodes: [InvoiceNode!]!
}
type InvoiceDoesNotBelongToCurrentStore implements DeleteSupplierInvoiceLineErrorInterface & InsertSupplierInvoiceLineErrorInterface & DeleteSupplierInvoiceErrorInterface & UpdateSupplierInvoiceErrorInterface & UpdateSupplierInvoiceLineErrorInterface {
	description: String!
}
input InvoiceFilterInput {
	nameId: EqualFilterStringInput
	storeId: EqualFilterStringInput
	type: EqualFilterInvoiceTypeInput
	status: EqualFilterInvoiceStatusInput
	comment: SimpleStringFilterInput
	theirReference: EqualFilterStringInput
	entryDatetime: DatetimeFilterInput
	confirmDatetime: DatetimeFilterInput
	finalisedDatetime: DatetimeFilterInput
}
type InvoiceLineBelongsToAnotherInvoice implements UpdateSupplierInvoiceLineErrorInterface & DeleteSupplierInvoiceLineErrorInterface {
	description: String!
	invoice: InvoiceResponse!
}
"""
Generic Connector
"""
type InvoiceLineConnector {
	totalCount: Int!
	nodes: [InvoiceLineNode!]!
}
type InvoiceLineIsReserved implements DeleteSupplierInvoiceLineErrorInterface {
	description: String!
}
type InvoiceLineNode {
	id: String!
	itemId: String!
	itemName: String!
	itemCode: String!
	packSize: Int!
	numberOfPacks: Int!
	costPricePerPack: Float!
	sellPricePerPack: Float!
	batch: String
	expiryDate: NaiveDate
	stockLine: StockLineResponse
}
union InvoiceLinesResponse = | ConnectorError | InvoiceLineConnector
type InvoiceNode {
	id: String!
	otherPartyName: String!
	otherPartyId: String!
	type: InvoiceNodeType!
	status: InvoiceNodeStatus!
	invoiceNumber: Int!
	theirReference: String
	comment: String
	entryDatetime: DateTime!
	confirmedDatetime: DateTime
	finalisedDatetime: DateTime
	lines: InvoiceLinesResponse!
	pricing: InvoicePriceResponse!
}
enum InvoiceNodeStatus {
	DRAFT
	CONFIRMED
	FINALISED
}
enum InvoiceNodeType {
	CUSTOMER_INVOICE
	SUPPLIER_INVOICE
}
type InvoiceNotFoundError implements DeleteCustomerInvoiceErrorInterface & UpdateCustomerInvoiceErrorInterface {
	description: String!
}
union InvoicePriceResponse = | NodeError | InvoicePricingNode
type InvoicePricingNode {
	totalAfterTax: Float!
}
union InvoiceResponse = | NodeError | InvoiceNode
enum InvoiceSortFieldInput {
	TYPE
	STATUS
	ENTRY_DATETIME
	CONFIRM_DATETIME
	FINALISED_DATE_TIME
}
input InvoiceSortInput {
	key: InvoiceSortFieldInput!
	desc: Boolean
}
union InvoicesResponse = | ConnectorError | InvoiceConnector
"""
Generic Connector
"""
type ItemConnector {
	totalCount: Int!
	nodes: [ItemNode!]!
}
input ItemFilterInput {
	name: SimpleStringFilterInput
	code: SimpleStringFilterInput
	isVisible: EqualFilterBoolInput
}
type ItemNode {
	id: String!
	name: String!
	code: String!
	isVisible: Boolean!
	availableBatches: StockLinesResponse!
}
enum ItemSortFieldInput {
	NAME
	CODE
}
input ItemSortInput {
	key: ItemSortFieldInput!
	desc: Boolean
}
union ItemsResponse = | ConnectorError | ItemConnector
type Mutations {
	insertCustomerInvoice(input: InsertCustomerInvoiceInput!): InsertCustomerInvoiceResultUnion!
	updateCustomerInvoice(input: UpdateCustomerInvoiceInput!): UpdateCustomerInvoiceResultUnion!
	deleteCustomerInvoice(input: DeleteCustomerInvoiceInput!): DeleteCustomerInvoiceResultUnion!
	insertSupplierInvoice(input: InsertSupplierInvoiceInput!): InsertSupplierInvoiceResponse!
	updateSupplierInvoice(input: UpdateSupplierInvoiceInput!): UpdateSupplierInvoiceResponse!
	deleteSupplierInvoice(input: DeleteSupplierInvoiceInput!): DeleteSupplierInvoiceResponse!
	insertSupplierInvoiceLine(input: InsertSupplierInvoiceLineInput!): InsertSupplierInvoiceLineResponse!
	updateSupplierInvoiceLine(input: UpdateSupplierInvoiceLineInput!): UpdateSupplierInvoiceLineResponse!
	deleteSupplierInvoiceLine(input: DeleteSupplierInvoiceLineInput!): DeleteSupplierInvoiceLineResponse!
}
scalar NaiveDate
"""
Generic Connector
"""
type NameConnector {
	totalCount: Int!
	nodes: [NameNode!]!
}
input NameFilterInput {
	name: SimpleStringFilterInput
	code: SimpleStringFilterInput
	isCustomer: Boolean
	isSupplier: Boolean
}
"""
Node Description Main
"""
type NameNode {
	id: String!
	"""
	Node Description Inner
	"""
	name: String!
	code: String!
	isCustomer: Boolean!
	isSupplier: Boolean!
}
enum NameSortFieldInput {
	NAME
	CODE
}
input NameSortInput {
	key: NameSortFieldInput!
	desc: Boolean
}
union NamesResponse = | ConnectorError | NameConnector
"""
Generic Error Wrapper
"""
type NodeError {
	error: NodeErrorInterface!
}
interface NodeErrorInterface {
	description: String!
}
type NotASupplierInvoice implements InsertSupplierInvoiceLineErrorInterface & UpdateSupplierInvoiceLineErrorInterface & DeleteSupplierInvoiceLineErrorInterface & UpdateSupplierInvoiceErrorInterface & DeleteSupplierInvoiceErrorInterface {
	description: String!
}
type NumberOfPacksAboveZero implements UpdateSupplierInvoiceLineErrorInterface {
	description: String!
}
type OtherPartyCannotBeThisStoreError implements UpdateCustomerInvoiceErrorInterface & InsertCustomerInvoiceErrorInterface {
	description: String!
}
type OtherPartyIdMissingError implements InsertCustomerInvoiceErrorInterface & UpdateCustomerInvoiceErrorInterface {
	description: String!
}
type OtherPartyIdNotFoundError implements InsertCustomerInvoiceErrorInterface & UpdateCustomerInvoiceErrorInterface {
	description: String!
}
type OtherPartyNotACustomerOfThisStoreError implements UpdateCustomerInvoiceErrorInterface & InsertCustomerInvoiceErrorInterface {
	description: String!
}
type OtherPartyNotASupplier implements InsertSupplierInvoiceErrorInterface & UpdateSupplierInvoiceErrorInterface {
	description: String!
	otherParty: NameNode!
}
type PackSizeAboveZero implements UpdateSupplierInvoiceLineErrorInterface {
	description: String!
}
type PaginationError implements ConnectorErrorInterface {
	description: String!
	rangeError: RangeError!
}
"""
Generic Pagination Input
"""
input PaginationInput {
	first: Int
	offset: Int
}
type Queries {
	apiVersion: String!
	names(page: PaginationInput, filter: NameFilterInput, sort: [NameSortInput!]): NamesResponse!
	items(page: PaginationInput, filter: ItemFilterInput, sort: [ItemSortInput!]): ItemsResponse!
	invoice(id: String!): InvoiceResponse!
	invoices(page: PaginationInput, filter: InvoiceFilterInput, sort: [InvoiceSortInput!]): InvoicesResponse!
}
type RangeError implements UpdateSupplierInvoiceLineErrorInterface & InsertSupplierInvoiceLineErrorInterface {
	description: String!
	field: RangeField!
	max: Int
	min: Int
}
enum RangeField {
	FIRST
	NUMBER_OF_PACKS
	PACK_SIZE
}
type RecordAlreadyExist implements InsertSupplierInvoiceErrorInterface & InsertSupplierInvoiceLineErrorInterface {
	description: String!
}
type RecordDoesNotExist implements DeleteSupplierInvoiceErrorInterface & UpdateSupplierInvoiceLineErrorInterface & UpdateSupplierInvoiceErrorInterface & DeleteSupplierInvoiceLineErrorInterface {
	description: String!
}
type RecordNotFound implements NodeErrorInterface {
	description: String!
	id: String!
}
input SimpleStringFilterInput {
	equalTo: String
	like: String
}
"""
Generic Connector
"""
type StockLineConnector {
	totalCount: Int!
	nodes: [StockLineNode!]!
}
type StockLineNode {
	id: String!
	itemId: String!
	storeId: String!
	batch: String
	packSize: Int!
	costPricePerPack: Float!
	sellPricePerPack: Float!
	availableNumberOfPacks: Int!
	totalNumberOfPacks: Int!
	expiryDate: NaiveDate
}
union StockLineResponse = | NodeError | StockLineNode
union StockLinesResponse = | ConnectorError | StockLineConnector
type UpdateCustomerInvoiceError {
	error: UpdateCustomerInvoiceErrorInterface!
}
interface UpdateCustomerInvoiceErrorInterface {
	description: String!
}
input UpdateCustomerInvoiceInput {
	id: String!
	otherPartyId: String!
	status: InvoiceNodeStatus
	comment: String
	theirReference: String
}
type UpdateCustomerInvoiceOk {
	invoice: InvoiceNode!
}
union UpdateCustomerInvoiceResultUnion = | UpdateCustomerInvoiceOk | UpdateCustomerInvoiceError
"""
Generic Error Wrapper
"""
type UpdateSupplierInvoiceError {
	error: UpdateSupplierInvoiceErrorInterface!
}
interface UpdateSupplierInvoiceErrorInterface {
	description: String!
}
input UpdateSupplierInvoiceInput {
	id: String!
	otherPartyId: String
	status: InvoiceNodeStatus
	comment: String
	theirReference: String
}
"""
Generic Error Wrapper
"""
type UpdateSupplierInvoiceLineError {
	error: UpdateSupplierInvoiceLineErrorInterface!
}
interface UpdateSupplierInvoiceLineErrorInterface {
	description: String!
}
input UpdateSupplierInvoiceLineInput {
	id: String!
	invoiceId: String!
	itemId: String
	packSize: Int
	batch: String
	costPricePerPack: Float
	sellPricePerPack: Float
	expiryDate: NaiveDate
	numberOfPacks: Int
}
union UpdateSupplierInvoiceLineResponse = | UpdateSupplierInvoiceLineError | NodeError | InvoiceLineNode
union UpdateSupplierInvoiceResponse = | UpdateSupplierInvoiceError | NodeError | InvoiceNode
schema {
	query: Queries
	mutation: Mutations
}
