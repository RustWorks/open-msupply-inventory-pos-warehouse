diff --git a/docs/content/docs/sync/advanced.md b/docs/content/docs/sync/advanced.md
index ac84bf7..2957de4 100644
--- a/docs/content/docs/sync/advanced.md
+++ b/docs/content/docs/sync/advanced.md
@@ -70,7 +70,7 @@ Records of the following types may be merged on the site where the related store
 
 * The record to be merged has its `status` field updated from `active` to `merged`.
 * The record to be merged has its `merged_into` field updated with the `id` of the record to keep.
-* All child records which are linked to the merged record `id`, and which are editable on the site, have their parent table `id` field (e.g. `transact_id`) changed to the new `id`.
+* All child records which are linked to the merged record `id`, and which are editable on the site, have their parent table `id` field (e.g. `invoice_id`) changed to the new `id`.
 * Normal code in a trigger sends it to the central server.
 
 ### When the central server receives the merged record
@@ -84,7 +84,7 @@ Records of the following types may be merged on the site where the related store
 * Before saving it checks for a change in value of the status field from the saved value.
 * If the status has changed to `merged`:
   * The record's `merged_into` field determines the new `id` to be used for child records.
-  * All child records which are linked to the merged record `id`, and which are editable on the site, have their `<some_table>_id` (e.g. `transact.id`) field changed to `merged_into`.
+  * All child records which are linked to the merged record `id`, and which are editable on the site, have their `<some_table>_id` (e.g. `invoice.id`) field changed to `merged_into`.
   * Sync triggers create `sync_out` records to be pushed to the central server.
 
 ## Delegated Rights
diff --git a/docs/content/docs/sync/basics.md b/docs/content/docs/sync/basics.md
index 93d8502..749e5b1 100644
--- a/docs/content/docs/sync/basics.md
+++ b/docs/content/docs/sync/basics.md
@@ -39,7 +39,7 @@ toc = true
 * `Store visibility` - for a store to send or recieve stock to or from another store, the stores must be visible to each other. The concept of visibility is symmetrical i.e. if store A is visible in store B, then store B is also visible in store A.
 * `Central data` data which is only editable on the primary site. Central data is synchronised to all sites via the central server. The main types of central data are items, facilities and categories.
 * `Central store data`: data which is only editable on the central server. Central store data is synchronised with the site where the store is active. The main types of central store data are store records themselves, stores preferences and store visibility records.
-* `Remote data`: also known as `store data`, remote data is data which is only editable on a single remote site. Store data is synchronised with the central server. The main types of remote data are transactions, requisitions and stocktakes (and their related child tables, such as transaction_lines, requisition_lines etc.).
+* `Remote data`: also known as `store data`, remote data is data which is only editable on a single remote site. Store data is synchronised with the central server. The main types of remote data are invoices, requisitions and stocktakes (and their related child tables, such as invoice_lines, requisition_lines etc.).
 * `Patient data`: patient- or prescriber-related remote data. As with all remote data, this data is only editable on a single remote site (referred to as the `home site`). Patient data is synchronised via the central server to all sites where the related record is visible. The main types of patient data are patient name records themselves, prescribers, patient medication records and insurance policies.
 
 
@@ -71,9 +71,9 @@ toc = true
 
 ## FAQ
 
-* What is a `transaction`?
+* What is a `invoice`?
 
-`transaction` is a table in mSupply (not to be confused with the concept of a SQL transaction). It mainly stores what are commonly thought of as invoices.
+`invoice` is a table in mSupply (not to be confused with the concept of a SQL invoice). It mainly stores what are commonly thought of as invoices.
 
 * Why do databases have ids?
 
diff --git a/docs/content/docs/sync/sync-queue.md b/docs/content/docs/sync/sync-queue.md
index 22e7d1f..0f9419f 100644
--- a/docs/content/docs/sync/sync-queue.md
+++ b/docs/content/docs/sync/sync-queue.md
@@ -34,7 +34,7 @@ Each `sync_out` record has the following fields:
 
 - Central server
   * Most central data tables are handled by central_change_log, with the exception of incoming transfers and site configuration data, e.g.:
-	* When a `transact` representing a finalised customer invoice is pushed from a remote site, a `sync_out` record is created for the `transact`, where `sync_out.site_id` is the `site_id` for the store linked to `transact.name_id`.
+	* When a `invoice` representing a finalised customer invoice is pushed from a remote site, a `sync_out` record is created for the `invoice`, where `sync_out.site_id` is the `site_id` for the store linked to `invoice.name_id`.
     * When a `name_store_join` record is created, updated or deleted, a corresponding `sync_out` record is created, where `sync_out.site_id` is set to the `site_id` for the `store` with `store.id = name_store_join.store_id`.
 	* When an `item_store_join` record is created, updated or deleted, a corresponding `sync_out` record is created, where `sync_out.site_id` is set to the `site_id` for the `store` with `store.id = name_store_join.store_id`.
 
@@ -71,7 +71,7 @@ For batch_size records:
 Send batch to central server
 ```
 
-*Secondary ordering by `sync_out.table_name` ensures that child records are sent before parents (e.g. `trans_line` records send before `transact` records`)
+*Secondary ordering by `sync_out.table_name` ensures that child records are sent before parents (e.g. `trans_line` records send before `invoice` records`)
 *See [Sync API]('api') for JSON format.
 
 ## Pulling
diff --git a/migrations/postgres/00000107_create_transact_table/down.sql b/migrations/postgres/00000107_create_transact_table/down.sql
deleted file mode 100644
index 5d7198d..0000000
--- a/migrations/postgres/00000107_create_transact_table/down.sql
+++ /dev/null
@@ -1,4 +0,0 @@
--- Drop transact table.
-
-DROP TABLE IF EXISTS transact CASCADE;
-DROP TYPE IF EXISTS transact_type;
diff --git a/migrations/postgres/00000107_create_transact_table/up.sql b/migrations/postgres/00000107_create_transact_table/up.sql
deleted file mode 100644
index 4ab62de..0000000
--- a/migrations/postgres/00000107_create_transact_table/up.sql
+++ /dev/null
@@ -1,26 +0,0 @@
--- Create transact table.
-
-CREATE TYPE transact_type AS ENUM (
-    'customer_invoice',
-    'customer_credit',
-    'supplier_invoice',
-    'supplier_credit',
-    'repack',
-    'build',
-    'receipt',
-    'payment'
-);
-
-CREATE TABLE transact (
-    id TEXT NOT NULL PRIMARY KEY,
-    -- For customer invoices, the id of the receiving customer.
-    -- For supplier invoices, the id of the sending supplier.
-    name_id TEXT NOT NULL,
-    -- For customer invoices, the id of the issuing store.
-    -- For supplier invoices, the id of the receiving store.
-    store_id TEXT NOT NULL,
-    invoice_number INTEGER NOT NULL,
-    type_of transact_type NOT NULL,
-    FOREIGN KEY(name_id) REFERENCES name(id),
-    FOREIGN KEY(store_id) REFERENCES store(id)
-)
diff --git a/migrations/postgres/00000108_create_transact_line_table/down.sql b/migrations/postgres/00000108_create_transact_line_table/down.sql
deleted file mode 100644
index e578ab0..0000000
--- a/migrations/postgres/00000108_create_transact_line_table/down.sql
+++ /dev/null
@@ -1,4 +0,0 @@
--- Drop transact_line table.
-
-DROP TABLE IF EXISTS transact_line CASCADE;
-DROP TYPE IF EXISTS transact_line_type;
diff --git a/migrations/postgres/00000108_create_transact_line_table/up.sql b/migrations/postgres/00000108_create_transact_line_table/up.sql
deleted file mode 100644
index c44f8af..0000000
--- a/migrations/postgres/00000108_create_transact_line_table/up.sql
+++ /dev/null
@@ -1,15 +0,0 @@
--- Create_line table.
-
-CREATE TYPE transact_line_type AS ENUM ('stock_out', 'stock_in', 'placeholder', 'cash_in', 'cash_out', 'non_stock', 'service');
-
-CREATE TABLE transact_line (
-    id TEXT NOT NULL PRIMARY KEY,
-    transact_id TEXT NOT NULL,
-    item_id TEXT NOT NULL,
-    -- stock_line_id is null for placeholders, service items.
-    stock_line_id TEXT,
-    type_of transact_line_type NOT NULL,
-    FOREIGN KEY(transact_id) REFERENCES transact(id),
-    FOREIGN KEY(item_id) REFERENCES item(id),
-    FOREIGN KEY(stock_line_id) REFERENCES stock_line(id)
-)
diff --git a/migrations/postgres/00000111_create_sync_out_table/up.sql b/migrations/postgres/00000111_create_sync_out_table/up.sql
index d9243d4..4eb6ac1 100644
--- a/migrations/postgres/00000111_create_sync_out_table/up.sql
+++ b/migrations/postgres/00000111_create_sync_out_table/up.sql
@@ -2,7 +2,7 @@
 
 CREATE TYPE sync_out_action_type AS ENUM ('insert', 'update', 'delete', 'patch');
 
-CREATE TYPE sync_out_table_name AS ENUM ('requisition', 'requisition_line', 'item', 'stock_line', 'transact', 'transact_line', 'name', 'store');
+CREATE TYPE sync_out_table_name AS ENUM ('requisition', 'requisition_line', 'item', 'stock_line', 'invoice', 'invoice_line', 'name', 'store');
 
 CREATE TABLE sync_out (
     id TEXT NOT NULL PRIMARY KEY,
diff --git a/migrations/sqlite/00000106_create_transact_table/down.sql b/migrations/sqlite/00000106_create_transact_table/down.sql
deleted file mode 100644
index 33e9314..0000000
--- a/migrations/sqlite/00000106_create_transact_table/down.sql
+++ /dev/null
@@ -1,3 +0,0 @@
--- Drop transact table.
-
-DROP TABLE IF EXISTS transact CASCADE;
diff --git a/migrations/sqlite/00000106_create_transact_table/up.sql b/migrations/sqlite/00000106_create_transact_table/up.sql
deleted file mode 100644
index 9b6cbae..0000000
--- a/migrations/sqlite/00000106_create_transact_table/up.sql
+++ /dev/null
@@ -1,23 +0,0 @@
--- Create transact table.
-
-CREATE TABLE transact (
-    id TEXT NOT NULL PRIMARY KEY,
-    -- For customer invoices, the id of the receiving customer.
-    -- For supplier invoices, the id of the sending supplier.
-    name_id TEXT NOT NULL,
-    -- For customer invoices, the id of the issuing store.
-    -- For supplier invoices, the id of the receiving store.
-    store_id TEXT NOT NULL,
-    invoice_number INTEGER NOT NULL,
-    type_of TEXT CHECK(type_of IN (
-        'customer_invoice',
-        'customer_credit',
-        'supplier_invoice',
-        'supplier_credit',
-        'repack',
-        'build',
-        'receipt',
-        'payment')) NOT NULL,
-    FOREIGN KEY(name_id) REFERENCES name(id),
-    FOREIGN KEY(store_id) REFERENCES store(id)
-)
diff --git a/migrations/sqlite/00000107_create_transact_line_table/down.sql b/migrations/sqlite/00000107_create_transact_line_table/down.sql
deleted file mode 100644
index 925e435..0000000
--- a/migrations/sqlite/00000107_create_transact_line_table/down.sql
+++ /dev/null
@@ -1,3 +0,0 @@
--- Drop transact_line table.
-
-DROP TABLE IF EXISTS transact_line CASCADE;
diff --git a/migrations/sqlite/00000107_create_transact_line_table/up.sql b/migrations/sqlite/00000107_create_transact_line_table/up.sql
deleted file mode 100644
index 9bffc13..0000000
--- a/migrations/sqlite/00000107_create_transact_line_table/up.sql
+++ /dev/null
@@ -1,20 +0,0 @@
--- Create transact_line table.
-
-CREATE TABLE transact_line (
-    id TEXT NOT NULL PRIMARY KEY,
-    transact_id TEXT NOT NULL,
-    type_of TEXT CHECK(type_of IN (
-        'stock_out',
-        'stock_in',
-        'placeholder',
-        'cash_in',
-        'cash_out',
-        'non_stock',
-        'service')) NOT NULL,
-    item_id TEXT NOT NULL,
-    -- stock_line_id is null for placeholders, service items.
-    stock_line_id TEXT,
-    FOREIGN KEY(transact_id) REFERENCES transact(id),
-    FOREIGN KEY(item_id) REFERENCES item(id),
-    FOREIGN KEY(stock_line_id) REFERENCES stock_line(id)
-)
diff --git a/migrations/sqlite/00000110_create_sync_out_table/up.sql b/migrations/sqlite/00000110_create_sync_out_table/up.sql
index 537d27b..79e05f1 100644
--- a/migrations/sqlite/00000110_create_sync_out_table/up.sql
+++ b/migrations/sqlite/00000110_create_sync_out_table/up.sql
@@ -8,8 +8,8 @@ CREATE TABLE sync_out (
         'requisition_line',
         'item',
         'stock_line',
-        'transact',
-        'transact_line',
+        'invoice',
+        'invoice_line',
         'name',
         'store')) NOT NULL,
     record_id TEXT NOT NULL,
diff --git a/sqlx-data.json b/sqlx-data.json
deleted file mode 100644
index be6e1a2..0000000
--- a/sqlx-data.json
+++ /dev/null
@@ -1,1241 +0,0 @@
-{
-  "db": "PostgreSQL",
-  "0419a49afdfca6ca4234b2b7664c26a343bf2910b59450b435b9655d26865b52": {
-    "query": "\n            SELECT id, username, password, email\n            FROM user_account\n            WHERE id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "username",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "password",
-          "type_info": "Text"
-        },
-        {
-          "ordinal": 3,
-          "name": "email",
-          "type_info": "Varchar"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        true
-      ]
-    }
-  },
-  "12fffd35564a4c84259232f3bd1a0045c39f0d42c97342848bd74575bd98c100": {
-    "query": "\n            INSERT INTO transact_line (id, transact_id, type_of, item_id, item_line_id)\n            VALUES ($1, $2, $3, $4, $5)\n            ",
-    "describe": {
-      "columns": [],
-      "parameters": {
-        "Left": [
-          "Varchar",
-          "Varchar",
-          {
-            "Custom": {
-              "name": "transact_line_type",
-              "kind": {
-                "Enum": [
-                  "stock_out",
-                  "stock_in",
-                  "placeholder",
-                  "cash_in",
-                  "cash_out",
-                  "non_stock",
-                  "service"
-                ]
-              }
-            }
-          },
-          "Varchar",
-          "Varchar"
-        ]
-      },
-      "nullable": []
-    }
-  },
-  "143868dcdcc65397e2e69f10ff80279167125fb00b94a2688339e36bea71b992": {
-    "query": "\n            SELECT id, item_name, type_of AS \"type_of!: ItemRowType\"\n            FROM item\n            WHERE id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "item_name",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "type_of!: ItemRowType",
-          "type_info": {
-            "Custom": {
-              "name": "item_type",
-              "kind": {
-                "Enum": [
-                  "general",
-                  "service",
-                  "cross_reference"
-                ]
-              }
-            }
-          }
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "1790af93222d022ba8fabfdb7f6fb56d180a2e2de877a1149cb8af77ee8b9965": {
-    "query": "\n            INSERT INTO transact (id, name_id, store_id, invoice_number, type_of)\n            VALUES ($1, $2, $3, $4, $5)\n            ",
-    "describe": {
-      "columns": [],
-      "parameters": {
-        "Left": [
-          "Varchar",
-          "Varchar",
-          "Varchar",
-          "Int4",
-          {
-            "Custom": {
-              "name": "transact_type",
-              "kind": {
-                "Enum": [
-                  "customer_invoice",
-                  "customer_credit",
-                  "supplier_invoice",
-                  "supplier_credit",
-                  "repack",
-                  "build",
-                  "receipt",
-                  "payment"
-                ]
-              }
-            }
-          }
-        ]
-      },
-      "nullable": []
-    }
-  },
-  "1a0de931a2dd429e2b7b7c49185b7c3cbf110eb446bfee2110f069e06c52a9dc": {
-    "query": "\n            SELECT id, requisition_id, item_id, actual_quantity, suggested_quantity\n            FROM requisition_line\n            WHERE id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "requisition_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "item_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 3,
-          "name": "actual_quantity",
-          "type_info": "Float8"
-        },
-        {
-          "ordinal": 4,
-          "name": "suggested_quantity",
-          "type_info": "Float8"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "2738591b54fa8e8e0e7bef3ee0389de539a15ff80749b08fe3752f4d029d84f7": {
-    "query": "\n            INSERT INTO item (id, item_name, type_of)\n            VALUES ($1, $2, $3)\n            ",
-    "describe": {
-      "columns": [],
-      "parameters": {
-        "Left": [
-          "Varchar",
-          "Varchar",
-          {
-            "Custom": {
-              "name": "item_type",
-              "kind": {
-                "Enum": [
-                  "general",
-                  "service",
-                  "cross_reference"
-                ]
-              }
-            }
-          }
-        ]
-      },
-      "nullable": []
-    }
-  },
-  "33acaf6cdb3bddc37df17cbbd97ce99598822b5c913cc8059cbb8cdd4ea9e6fe": {
-    "query": "\n            SELECT id, transact_id, type_of AS \"type_of!: TransactLineRowType\", item_id, item_line_id\n            FROM transact_line\n            WHERE id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "transact_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "type_of!: TransactLineRowType",
-          "type_info": {
-            "Custom": {
-              "name": "transact_line_type",
-              "kind": {
-                "Enum": [
-                  "stock_out",
-                  "stock_in",
-                  "placeholder",
-                  "cash_in",
-                  "cash_out",
-                  "non_stock",
-                  "service"
-                ]
-              }
-            }
-          }
-        },
-        {
-          "ordinal": 3,
-          "name": "item_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 4,
-          "name": "item_line_id",
-          "type_info": "Varchar"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false,
-        true
-      ]
-    }
-  },
-  "37a13f51804e07d7bce0a13c64da5a23264f44dd88df22b8a1c5057c7e8edb02": {
-    "query": "\n            SELECT id, name_id\n            FROM store\n            WHERE id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Text"
-        },
-        {
-          "ordinal": 1,
-          "name": "name_id",
-          "type_info": "Varchar"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false
-      ]
-    }
-  },
-  "45db5f650d79431212fcb4cb61b2ac26c9f22dbfd0edd8cecd89633f4288cb16": {
-    "query": "\n            SELECT id, transact_id, type_of AS \"type_of!: TransactLineRowType\", item_id, item_line_id\n            FROM transact_line\n            WHERE transact_id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "transact_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "type_of!: TransactLineRowType",
-          "type_info": {
-            "Custom": {
-              "name": "transact_line_type",
-              "kind": {
-                "Enum": [
-                  "stock_out",
-                  "stock_in",
-                  "placeholder",
-                  "cash_in",
-                  "cash_out",
-                  "non_stock",
-                  "service"
-                ]
-              }
-            }
-          }
-        },
-        {
-          "ordinal": 3,
-          "name": "item_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 4,
-          "name": "item_line_id",
-          "type_info": "Varchar"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false,
-        true
-      ]
-    }
-  },
-  "629b3f308006583eaa2395848255fda9f2ac56baab5dee77b6a9e1375a7ba94f": {
-    "query": "\n            SELECT id, name_id, store_id, invoice_number, type_of AS \"type_of!: TransactRowType\"\n            FROM transact\n            WHERE type_of = 'customer_invoice' AND name_id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "name_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "store_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 3,
-          "name": "invoice_number",
-          "type_info": "Int4"
-        },
-        {
-          "ordinal": 4,
-          "name": "type_of!: TransactRowType",
-          "type_info": {
-            "Custom": {
-              "name": "transact_type",
-              "kind": {
-                "Enum": [
-                  "customer_invoice",
-                  "customer_credit",
-                  "supplier_invoice",
-                  "supplier_credit",
-                  "repack",
-                  "build",
-                  "receipt",
-                  "payment"
-                ]
-              }
-            }
-          }
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "63cfcbd7be18b96261640fc122ebcdccd8492e13f19332effe972cac946782f2": {
-    "query": "\n            SELECT id, requisition_id, item_id, actual_quantity, suggested_quantity\n            FROM requisition_line\n            WHERE id = ANY($1)\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "requisition_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "item_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 3,
-          "name": "actual_quantity",
-          "type_info": "Float8"
-        },
-        {
-          "ordinal": 4,
-          "name": "suggested_quantity",
-          "type_info": "Float8"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "TextArray"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "67e12749a5e7595ca2810d12bd905d77c82712d0932e4e3adf5edd16c2ff9409": {
-    "query": "\n            SELECT id, name_id, store_id, invoice_number, type_of AS \"type_of!: TransactRowType\"\n            FROM transact\n            WHERE type_of = 'customer_invoice' AND store_id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "name_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "store_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 3,
-          "name": "invoice_number",
-          "type_info": "Int4"
-        },
-        {
-          "ordinal": 4,
-          "name": "type_of!: TransactRowType",
-          "type_info": {
-            "Custom": {
-              "name": "transact_type",
-              "kind": {
-                "Enum": [
-                  "customer_invoice",
-                  "customer_credit",
-                  "supplier_invoice",
-                  "supplier_credit",
-                  "repack",
-                  "build",
-                  "receipt",
-                  "payment"
-                ]
-              }
-            }
-          }
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "6a8d53cfd160f2ca26c547e735143e20bc3abedccf38f83db5bcf34b69a12bb7": {
-    "query": "\n            SELECT id, name_id\n            FROM store\n            WHERE id = ANY($1)\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Text"
-        },
-        {
-          "ordinal": 1,
-          "name": "name_id",
-          "type_info": "Varchar"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "TextArray"
-        ]
-      },
-      "nullable": [
-        false,
-        false
-      ]
-    }
-  },
-  "7c51b56abafb83df3e4520258a4b7eceff05f80aacab9a8837916feac3bb66c1": {
-    "query": "\n            SELECT id, name_id, store_id, invoice_number, type_of AS \"type_of!: TransactRowType\"\n            FROM transact\n            WHERE id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "name_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "store_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 3,
-          "name": "invoice_number",
-          "type_info": "Int4"
-        },
-        {
-          "ordinal": 4,
-          "name": "type_of!: TransactRowType",
-          "type_info": {
-            "Custom": {
-              "name": "transact_type",
-              "kind": {
-                "Enum": [
-                  "customer_invoice",
-                  "customer_credit",
-                  "supplier_invoice",
-                  "supplier_credit",
-                  "repack",
-                  "build",
-                  "receipt",
-                  "payment"
-                ]
-              }
-            }
-          }
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "8b1e4a15aed4116f914734ebfce8418be66e9209e13941ad1979ff086d66a519": {
-    "query": "\n            INSERT INTO user_account (id, username, password, email)\n            VALUES ($1, $2, $3, $4)\n            ",
-    "describe": {
-      "columns": [],
-      "parameters": {
-        "Left": [
-          "Varchar",
-          "Varchar",
-          "Text",
-          "Varchar"
-        ]
-      },
-      "nullable": []
-    }
-  },
-  "8c041eeae8f065cef681e3960cee576890ef012eb45f2a75a1629e92cc553bb4": {
-    "query": "\n            SELECT id, item_id, store_id, batch, quantity\n            from item_line\n            WHERE id = ANY($1)\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "item_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "store_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 3,
-          "name": "batch",
-          "type_info": "Text"
-        },
-        {
-          "ordinal": 4,
-          "name": "quantity",
-          "type_info": "Float8"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "TextArray"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "8c6a3b1d5cae2845a6bf18f41de5ae51a9690d5d3c5d4a839f5d09aa76ddd071": {
-    "query": "\n            INSERT INTO requisition_line (id, requisition_id, item_id, actual_quantity, suggested_quantity)\n            VALUES ($1, $2, $3, $4, $5)\n            ",
-    "describe": {
-      "columns": [],
-      "parameters": {
-        "Left": [
-          "Varchar",
-          "Varchar",
-          "Varchar",
-          "Float8",
-          "Float8"
-        ]
-      },
-      "nullable": []
-    }
-  },
-  "8e4578f0f98e3b6c3cbe4e94ca57d9d011641f054a8c9d4d0a674be1f464f277": {
-    "query": "\n            INSERT INTO store (id, name_id)\n            VALUES ($1, $2)\n            ",
-    "describe": {
-      "columns": [],
-      "parameters": {
-        "Left": [
-          "Text",
-          "Varchar"
-        ]
-      },
-      "nullable": []
-    }
-  },
-  "8ec617aab1182b2d949dfbbe866f96153a2dc9b3dd6625e6dae843d727e7e5a6": {
-    "query": "\n            INSERT INTO name (id, name)\n            VALUES ($1, $2)\n            ",
-    "describe": {
-      "columns": [],
-      "parameters": {
-        "Left": [
-          "Varchar",
-          "Text"
-        ]
-      },
-      "nullable": []
-    }
-  },
-  "93f5b22dcef5bdcffde68f1d049089982c4c8b2b1cdc380bd3df305a3b731afe": {
-    "query": "\n            SELECT id, username, password, email\n            FROM user_account\n            WHERE id = ANY($1)\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "username",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "password",
-          "type_info": "Text"
-        },
-        {
-          "ordinal": 3,
-          "name": "email",
-          "type_info": "Varchar"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "TextArray"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        true
-      ]
-    }
-  },
-  "94e6f8c5aacf67e3fed26675e7d8ce690d588e9712ee8708d7d7bb207dcbaaad": {
-    "query": "\n            SELECT id, name\n            FROM name\n            WHERE id = ANY($1)\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "name",
-          "type_info": "Text"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "TextArray"
-        ]
-      },
-      "nullable": [
-        false,
-        false
-      ]
-    }
-  },
-  "a151307a60ed52f66ea0c2720ad2276ea9e51eee74ac201c8629f7a414bd854c": {
-    "query": "\n            SELECT id, name_id, store_id, type_of AS \"type_of!: RequisitionRowType\"\n            FROM requisition\n            WHERE id = ANY($1)\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "name_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "store_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 3,
-          "name": "type_of!: RequisitionRowType",
-          "type_info": {
-            "Custom": {
-              "name": "requisition_type",
-              "kind": {
-                "Enum": [
-                  "imprest",
-                  "stock_history",
-                  "request",
-                  "response",
-                  "supply",
-                  "report"
-                ]
-              }
-            }
-          }
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "TextArray"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "a7db1d6dcc9a911008b2fbeb1251caebc21262de205c54032c8805c8ddcf7dd1": {
-    "query": "\n            SELECT id, transact_id, type_of AS \"type_of!: TransactLineRowType\", item_id, item_line_id\n            FROM transact_line\n            WHERE id = ANY($1)\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "transact_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "type_of!: TransactLineRowType",
-          "type_info": {
-            "Custom": {
-              "name": "transact_line_type",
-              "kind": {
-                "Enum": [
-                  "stock_out",
-                  "stock_in",
-                  "placeholder",
-                  "cash_in",
-                  "cash_out",
-                  "non_stock",
-                  "service"
-                ]
-              }
-            }
-          }
-        },
-        {
-          "ordinal": 3,
-          "name": "item_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 4,
-          "name": "item_line_id",
-          "type_info": "Varchar"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "TextArray"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false,
-        true
-      ]
-    }
-  },
-  "abfb88e361775f8379a79c78b3c3b910268f6fa84c114005ec930b09b6b62fee": {
-    "query": "\n            SELECT id, item_name, type_of AS \"type_of!: ItemRowType\"\n            FROM item\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "item_name",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "type_of!: ItemRowType",
-          "type_info": {
-            "Custom": {
-              "name": "item_type",
-              "kind": {
-                "Enum": [
-                  "general",
-                  "service",
-                  "cross_reference"
-                ]
-              }
-            }
-          }
-        }
-      ],
-      "parameters": {
-        "Left": []
-      },
-      "nullable": [
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "b7e9de5276037042baeb17780b4251d6af51356036293d2a1f4d62c96c1a0123": {
-    "query": "\n            SELECT id, name\n            FROM name\n            WHERE id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "name",
-          "type_info": "Text"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false
-      ]
-    }
-  },
-  "bd50d9874cf39623b16424902fd7076b8942b25fd507cf9ca8342588f1b703d3": {
-    "query": "\n            SELECT id, name_id, store_id, invoice_number, type_of AS \"type_of!: TransactRowType\"\n            FROM transact\n            WHERE id = ANY($1)\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "name_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "store_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 3,
-          "name": "invoice_number",
-          "type_info": "Int4"
-        },
-        {
-          "ordinal": 4,
-          "name": "type_of!: TransactRowType",
-          "type_info": {
-            "Custom": {
-              "name": "transact_type",
-              "kind": {
-                "Enum": [
-                  "customer_invoice",
-                  "customer_credit",
-                  "supplier_invoice",
-                  "supplier_credit",
-                  "repack",
-                  "build",
-                  "receipt",
-                  "payment"
-                ]
-              }
-            }
-          }
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "TextArray"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "c5553fc0ddcbcecac595eda77cc99f64321cc17c4b008998edd43eec1fde7d1d": {
-    "query": "\n            INSERT INTO item_line (id, item_id, store_id, batch, quantity)\n            VALUES ($1, $2, $3, $4, $5)\n            ",
-    "describe": {
-      "columns": [],
-      "parameters": {
-        "Left": [
-          "Varchar",
-          "Varchar",
-          "Varchar",
-          "Text",
-          "Float8"
-        ]
-      },
-      "nullable": []
-    }
-  },
-  "cc98ed36ab4b64cc6a985e694e7c538cf4ebbb70512082c7378a92904ee7cee0": {
-    "query": "\n            INSERT INTO requisition (id, name_id, store_id, type_of)\n            VALUES ($1, $2, $3, $4)\n            ",
-    "describe": {
-      "columns": [],
-      "parameters": {
-        "Left": [
-          "Varchar",
-          "Varchar",
-          "Varchar",
-          {
-            "Custom": {
-              "name": "requisition_type",
-              "kind": {
-                "Enum": [
-                  "imprest",
-                  "stock_history",
-                  "request",
-                  "response",
-                  "supply",
-                  "report"
-                ]
-              }
-            }
-          }
-        ]
-      },
-      "nullable": []
-    }
-  },
-  "d016c899bcc810314578fd46c4e4874bee56c67071285e11f56f28273ece2cbb": {
-    "query": "\n            SELECT id, item_name, type_of AS \"type_of!: ItemRowType\"\n            FROM item\n            WHERE id = ANY($1)\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "item_name",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "type_of!: ItemRowType",
-          "type_info": {
-            "Custom": {
-              "name": "item_type",
-              "kind": {
-                "Enum": [
-                  "general",
-                  "service",
-                  "cross_reference"
-                ]
-              }
-            }
-          }
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "TextArray"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "de007ad514feb72e0878a0710508bbb56b5f8f0c858acf655774047fc02b3714": {
-    "query": "\n            SELECT id, item_id, store_id, batch, quantity\n            from item_line\n            where id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "item_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "store_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 3,
-          "name": "batch",
-          "type_info": "Text"
-        },
-        {
-          "ordinal": 4,
-          "name": "quantity",
-          "type_info": "Float8"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "ef0a15ddf2b3c05a9ce332b380958248aad28bd4af51f9c7d5df468e15a29283": {
-    "query": "\n            SELECT id, name_id, store_id, type_of AS \"type_of!: RequisitionRowType\"\n            FROM requisition\n            WHERE id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "name_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "store_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 3,
-          "name": "type_of!: RequisitionRowType",
-          "type_info": {
-            "Custom": {
-              "name": "requisition_type",
-              "kind": {
-                "Enum": [
-                  "imprest",
-                  "stock_history",
-                  "request",
-                  "response",
-                  "supply",
-                  "report"
-                ]
-              }
-            }
-          }
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false
-      ]
-    }
-  },
-  "f12f3178e7883f557b8b223d104a41471575bfca5d6ef1dc8eedd2221d615459": {
-    "query": "\n            SELECT id, requisition_id, item_id, actual_quantity, suggested_quantity\n            FROM requisition_line\n            WHERE requisition_id = $1\n            ",
-    "describe": {
-      "columns": [
-        {
-          "ordinal": 0,
-          "name": "id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 1,
-          "name": "requisition_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 2,
-          "name": "item_id",
-          "type_info": "Varchar"
-        },
-        {
-          "ordinal": 3,
-          "name": "actual_quantity",
-          "type_info": "Float8"
-        },
-        {
-          "ordinal": 4,
-          "name": "suggested_quantity",
-          "type_info": "Float8"
-        }
-      ],
-      "parameters": {
-        "Left": [
-          "Text"
-        ]
-      },
-      "nullable": [
-        false,
-        false,
-        false,
-        false,
-        false
-      ]
-    }
-  }
-}
\ No newline at end of file
diff --git a/src/database/loader/diesel.rs b/src/database/loader/diesel.rs
index b5094c6..cc80cd7 100644
--- a/src/database/loader/diesel.rs
+++ b/src/database/loader/diesel.rs
@@ -1,12 +1,12 @@
 use crate::{
     database::{
         loader::{
-            ItemLoader, NameLoader, RequisitionLineLoader, RequisitionLoader, StoreLoader,
-            TransactLineLoader, TransactLoader, UserAccountLoader,
+            InvoiceLineLoader, InvoiceLoader, ItemLoader, NameLoader, RequisitionLineLoader,
+            RequisitionLoader, StoreLoader, UserAccountLoader,
         },
         repository::{
-            ItemRepository, NameRepository, RequisitionLineRepository, RequisitionRepository,
-            StockLineRepository, StoreRepository, TransactLineRepository, TransactRepository,
+            InvoiceLineRepository, InvoiceRepository, ItemRepository, NameRepository,
+            RequisitionLineRepository, RequisitionRepository, StockLineRepository, StoreRepository,
             UserAccountRepository,
         },
     },
@@ -52,14 +52,12 @@ pub async fn get_loaders(settings: &Settings) -> LoaderMap {
     let store_repository = StoreRepository::new(pool.clone());
     let store_loader = DataLoader::new(StoreLoader { store_repository });
 
-    let transact_repository = TransactRepository::new(pool.clone());
-    let transact_loader = DataLoader::new(TransactLoader {
-        transact_repository,
-    });
+    let invoice_repository = InvoiceRepository::new(pool.clone());
+    let invoice_loader = DataLoader::new(InvoiceLoader { invoice_repository });
 
-    let transact_line_repository = TransactLineRepository::new(pool.clone());
-    let transact_line_loader = DataLoader::new(TransactLineLoader {
-        transact_line_repository,
+    let invoice_line_repository = InvoiceLineRepository::new(pool.clone());
+    let invoice_line_loader = DataLoader::new(InvoiceLineLoader {
+        invoice_line_repository,
     });
 
     let user_account_repository = UserAccountRepository::new(pool.clone());
@@ -72,8 +70,8 @@ pub async fn get_loaders(settings: &Settings) -> LoaderMap {
     loaders.insert(requisition_line_loader);
     loaders.insert(name_loader);
     loaders.insert(store_loader);
-    loaders.insert(transact_loader);
-    loaders.insert(transact_line_loader);
+    loaders.insert(invoice_loader);
+    loaders.insert(invoice_line_loader);
     loaders.insert(user_account_loader);
 
     loaders
diff --git a/src/database/loader/mock.rs b/src/database/loader/mock.rs
index 0f2a8ff..8cc53b9 100644
--- a/src/database/loader/mock.rs
+++ b/src/database/loader/mock.rs
@@ -1,18 +1,18 @@
 use crate::{
     database::{
         loader::{
-            ItemLoader, NameLoader, RequisitionLineLoader, RequisitionLoader, StockLineLoader,
-            StoreLoader, TransactLineLoader, TransactLoader, UserAccountLoader,
+            InvoiceLineLoader, InvoiceLoader, ItemLoader, NameLoader, RequisitionLineLoader,
+            RequisitionLoader, StockLineLoader, StoreLoader, UserAccountLoader,
         },
         mock,
         repository::{
-            ItemRepository, NameRepository, RequisitionLineRepository, RequisitionRepository,
-            StockLineRepository, StoreRepository, TransactLineRepository, TransactRepository,
+            InvoiceLineRepository, InvoiceRepository, ItemRepository, NameRepository,
+            RequisitionLineRepository, RequisitionRepository, StockLineRepository, StoreRepository,
             UserAccountRepository,
         },
         schema::{
-            DatabaseRow, ItemRow, NameRow, RequisitionLineRow, RequisitionRow, StockLineRow,
-            StoreRow, TransactLineRow, TransactRow, UserAccountRow,
+            DatabaseRow, InvoiceLineRow, InvoiceRow, ItemRow, NameRow, RequisitionLineRow,
+            RequisitionRow, StockLineRow, StoreRow, UserAccountRow,
         },
     },
     server::data::LoaderMap,
@@ -69,19 +69,19 @@ pub async fn get_loaders(_settings: &Settings) -> LoaderMap {
         mock_data.insert(store.id.to_string(), DatabaseRow::Store(store.clone()));
     }
 
-    let mock_transacts: Vec<TransactRow> = mock::mock_transacts();
-    for transact in mock_transacts {
+    let mock_invoices: Vec<InvoiceRow> = mock::mock_invoices();
+    for invoice in mock_invoices {
         mock_data.insert(
-            transact.id.to_string(),
-            DatabaseRow::Transact(transact.clone()),
+            invoice.id.to_string(),
+            DatabaseRow::invoice(invoice.clone()),
         );
     }
 
-    let mock_transact_lines: Vec<TransactLineRow> = mock::mock_transact_lines();
-    for transact_line in mock_transact_lines {
+    let mock_invoice_lines: Vec<InvoiceLineRow> = mock::mock_invoice_lines();
+    for invoice_line in mock_invoice_lines {
         mock_data.insert(
-            transact_line.id.to_string(),
-            DatabaseRow::TransactLine(transact_line.clone()),
+            invoice_line.id.to_string(),
+            DatabaseRow::invoiceLine(invoice_line.clone()),
         );
     }
 
@@ -114,14 +114,12 @@ pub async fn get_loaders(_settings: &Settings) -> LoaderMap {
     let store_repository = StoreRepository::new(Arc::clone(&mock_data));
     let store_loader = DataLoader::new(StoreLoader { store_repository });
 
-    let transact_repository = TransactRepository::new(Arc::clone(&mock_data));
-    let transact_loader = DataLoader::new(TransactLoader {
-        transact_repository,
-    });
+    let invoice_repository = InvoiceRepository::new(Arc::clone(&mock_data));
+    let invoice_loader = DataLoader::new(InvoiceLoader { invoice_repository });
 
-    let transact_line_repository = TransactLineRepository::new(Arc::clone(&mock_data));
-    let transact_line_loader = DataLoader::new(TransactLineLoader {
-        transact_line_repository,
+    let invoice_line_repository = InvoiceLineRepository::new(Arc::clone(&mock_data));
+    let invoice_line_loader = DataLoader::new(InvoiceLineLoader {
+        invoice_line_repository,
     });
 
     let user_account_repository = UserAccountRepository::new(Arc::clone(&mock_data));
@@ -134,8 +132,8 @@ pub async fn get_loaders(_settings: &Settings) -> LoaderMap {
     loaders.insert(requisition_line_loader);
     loaders.insert(name_loader);
     loaders.insert(store_loader);
-    loaders.insert(transact_loader);
-    loaders.insert(transact_line_loader);
+    loaders.insert(invoice_loader);
+    loaders.insert(invoice_line_loader);
     loaders.insert(user_account_loader);
 
     loaders
diff --git a/src/database/loader/mod.rs b/src/database/loader/mod.rs
index 98ec09b..1cffb93 100644
--- a/src/database/loader/mod.rs
+++ b/src/database/loader/mod.rs
@@ -2,21 +2,21 @@
 #[cfg_attr(not(feature = "mock"), path = "diesel.rs")]
 mod loader;
 
+mod invoice;
+mod invoice_line;
 mod item;
 mod name;
 mod requisition;
 mod requisition_line;
 mod store;
-mod transact;
-mod transact_line;
 mod user_account;
 
+pub use invoice::InvoiceLoader;
+pub use invoice_line::InvoiceLineLoader;
 pub use item::ItemLoader;
 pub use loader::get_loaders;
 pub use name::NameLoader;
 pub use requisition::RequisitionLoader;
 pub use requisition_line::RequisitionLineLoader;
 pub use store::StoreLoader;
-pub use transact::TransactLoader;
-pub use transact_line::TransactLineLoader;
 pub use user_account::UserAccountLoader;
diff --git a/src/database/loader/transact.rs b/src/database/loader/transact.rs
deleted file mode 100644
index 80fbb18..0000000
--- a/src/database/loader/transact.rs
+++ /dev/null
@@ -1,31 +0,0 @@
-use crate::database::repository::{RepositoryError, TransactRepository};
-use crate::database::schema::TransactRow;
-
-use async_graphql::dataloader::*;
-use async_graphql::*;
-use std::collections::HashMap;
-
-pub struct TransactLoader {
-    pub transact_repository: TransactRepository,
-}
-
-#[async_trait::async_trait]
-impl Loader<String> for TransactLoader {
-    type Value = TransactRow;
-    type Error = RepositoryError;
-
-    async fn load(&self, keys: &[String]) -> Result<HashMap<String, Self::Value>, Self::Error> {
-        Ok(self
-            .transact_repository
-            .find_many_by_id(keys)
-            .await
-            .unwrap()
-            .iter()
-            .map(|transact: &TransactRow| {
-                let transact_id = transact.id.clone();
-                let transact = transact.clone();
-                (transact_id, transact)
-            })
-            .collect())
-    }
-}
diff --git a/src/database/loader/transact_line.rs b/src/database/loader/transact_line.rs
deleted file mode 100644
index ef5625d..0000000
--- a/src/database/loader/transact_line.rs
+++ /dev/null
@@ -1,31 +0,0 @@
-use crate::database::repository::{RepositoryError, TransactLineRepository};
-use crate::database::schema::TransactLineRow;
-
-use async_graphql::dataloader::*;
-use async_graphql::*;
-use std::collections::HashMap;
-
-pub struct TransactLineLoader {
-    pub transact_line_repository: TransactLineRepository,
-}
-
-#[async_trait::async_trait]
-impl Loader<String> for TransactLineLoader {
-    type Value = TransactLineRow;
-    type Error = RepositoryError;
-
-    async fn load(&self, keys: &[String]) -> Result<HashMap<String, Self::Value>, Self::Error> {
-        Ok(self
-            .transact_line_repository
-            .find_many_by_id(keys)
-            .await
-            .unwrap()
-            .iter()
-            .map(|transact_line: &TransactLineRow| {
-                let transact_line_id = transact_line.id.clone();
-                let transact_line = transact_line.clone();
-                (transact_line_id, transact_line)
-            })
-            .collect())
-    }
-}
diff --git a/src/database/mock/mocks.rs b/src/database/mock/mocks.rs
index b82035d..cb11d11 100644
--- a/src/database/mock/mocks.rs
+++ b/src/database/mock/mocks.rs
@@ -1,4 +1,3 @@
-
 pub fn mock_requisition_lines() -> Vec<database::schema::RequisitionLineRow> {
     let requisition_line_a = database::schema::RequisitionLineRow {
         id: "requisition_a_line_a".to_string(),
@@ -49,63 +48,63 @@ pub fn mock_requisition_lines() -> Vec<database::schema::RequisitionLineRow> {
     ]
 }
 
-pub fn mock_transacts() -> Vec<database::schema::TransactRow> {
-    let transact_a = database::schema::TransactRow {
-        id: "transact_a".to_string(),
+pub fn mock_invoices() -> Vec<database::schema::InvoiceRow> {
+    let invoice_a = database::schema::InvoiceRow {
+        id: "invoice_a".to_string(),
         name_id: "name_store_a".to_string(),
         store_id: "store_a".to_string(),
         invoice_number: 1,
-        type_of: database::schema::TransactRowType::CustomerInvoice,
+        r#type: database::schema::InvoiceRowType::CustomerInvoice,
     };
 
-    let transact_b = database::schema::TransactRow {
-        id: "transact_b".to_string(),
+    let invoice_b = database::schema::InvoiceRow {
+        id: "invoice_b".to_string(),
         name_id: "name_store_b".to_string(),
         store_id: "store_b".to_string(),
         invoice_number: 1,
-        type_of: database::schema::TransactRowType::CustomerInvoice,
+        r#type: database::schema::InvoiceRowType::CustomerInvoice,
     };
 
-    vec![transact_a, transact_b]
+    vec![invoice_a, invoice_b]
 }
 
-pub fn mock_transact_lines() -> Vec<database::schema::TransactLineRow> {
-    let transact_a_line_a = database::schema::TransactLineRow {
-        id: "transact_a_line_a".to_string(),
-        transact_id: "transact_a".to_string(),
-        type_of: crate::database::schema::TransactLineRowType::StockOut,
+pub fn mock_invoice_lines() -> Vec<database::schema::InvoiceLineRow> {
+    let invoice_a_line_a = database::schema::InvoiceLineRow {
+        id: "invoice_a_line_a".to_string(),
+        invoice_id: "invoice_a".to_string(),
+        r#type: crate::database::schema::InvoiceLineRowType::StockOut,
         item_id: "item_a".to_string(),
         stock_line_id: Some("item_a_line_a".to_string()),
     };
 
-    let transact_a_line_b = database::schema::TransactLineRow {
-        id: "transact_a_line_b".to_string(),
-        transact_id: "transact_a".to_string(),
-        type_of: database::schema::TransactLineRowType::StockOut,
+    let invoice_a_line_b = database::schema::InvoiceLineRow {
+        id: "invoice_a_line_b".to_string(),
+        invoice_id: "invoice_a".to_string(),
+        r#type: database::schema::InvoiceLineRowType::StockOut,
         item_id: "item_b".to_string(),
         stock_line_id: Some("item_b_line_a".to_string()),
     };
 
-    let transact_b_line_a = database::schema::TransactLineRow {
-        id: "transact_b_line_a".to_string(),
-        transact_id: "transact_b".to_string(),
-        type_of: database::schema::TransactLineRowType::StockOut,
+    let invoice_b_line_a = database::schema::InvoiceLineRow {
+        id: "invoice_b_line_a".to_string(),
+        invoice_id: "invoice_b".to_string(),
+        r#type: database::schema::InvoiceLineRowType::StockOut,
         item_id: "item_a".to_string(),
         stock_line_id: Some("item_a_line_a".to_string()),
     };
 
-    let transact_b_line_b = database::schema::TransactLineRow {
-        id: "transact_b_line_b".to_string(),
-        transact_id: "transact_b".to_string(),
-        type_of: database::schema::TransactLineRowType::StockOut,
+    let invoice_b_line_b = database::schema::InvoiceLineRow {
+        id: "invoice_b_line_b".to_string(),
+        invoice_id: "invoice_b".to_string(),
+        r#type: database::schema::InvoiceLineRowType::StockOut,
         item_id: "item_b".to_string(),
         stock_line_id: Some("item_b_line_a".to_string()),
     };
 
     vec![
-        transact_a_line_a,
-        transact_a_line_b,
-        transact_b_line_a,
-        transact_b_line_b,
+        invoice_a_line_a,
+        invoice_a_line_b,
+        invoice_b_line_a,
+        invoice_b_line_b,
     ]
 }
diff --git a/src/database/mock/mod.rs b/src/database/mock/mod.rs
index c1997f3..ea6bb35 100644
--- a/src/database/mock/mod.rs
+++ b/src/database/mock/mod.rs
@@ -4,8 +4,8 @@ mod name;
 mod requisition;
 mod requisition_line;
 mod store;
-mod transact;
-mod transact_line;
+mod invoice;
+mod invoice_line;
 mod user_account;
 
 pub use item::mock_items;
@@ -14,6 +14,6 @@ pub use name::mock_names;
 pub use requisition::mock_requisitions;
 pub use requisition_line::mock_requisition_lines;
 pub use store::mock_stores;
-pub use transact::mock_transacts;
-pub use transact_line::mock_transact_lines;
+pub use invoice::mock_invoices;
+pub use invoice_line::mock_invoice_lines;
 pub use user_account::mock_user_accounts;
diff --git a/src/database/mock/transact.rs b/src/database/mock/transact.rs
deleted file mode 100644
index 9ba245d..0000000
--- a/src/database/mock/transact.rs
+++ /dev/null
@@ -1,58 +0,0 @@
-use crate::database::schema::{TransactRow, TransactRowType};
-
-pub fn mock_customer_invoice_a() -> TransactRow {
-    TransactRow {
-        id: String::from("customer_invoice_a"),
-        name_id: String::from("name_store_a"),
-        store_id: String::from("store_b"),
-        invoice_number: 1,
-        type_of: TransactRowType::CustomerInvoice,
-    }
-}
-
-pub fn mock_customer_invoice_b() -> TransactRow {
-    TransactRow {
-        id: String::from("customer_invoice_b"),
-        name_id: String::from("name_store_a"),
-        store_id: String::from("store_c"),
-        invoice_number: 3,
-        type_of: TransactRowType::CustomerInvoice,
-    }
-}
-
-pub fn mock_supplier_invoice_a() -> TransactRow {
-    TransactRow {
-        id: String::from("supplier_invoice_a"),
-        name_id: String::from("name_store_b"),
-        store_id: String::from("store_a"),
-        invoice_number: 2,
-        type_of: TransactRowType::SupplierInvoice,
-    }
-}
-
-pub fn mock_supplier_invoice_b() -> TransactRow {
-    TransactRow {
-        id: String::from("supplier_invoice_b"),
-        name_id: String::from("name_store_c"),
-        store_id: String::from("store_a"),
-        invoice_number: 4,
-        type_of: TransactRowType::SupplierInvoice,
-    }
-}
-
-pub fn mock_customer_invoices() -> Vec<TransactRow> {
-    vec![mock_customer_invoice_a(), mock_customer_invoice_b()]
-}
-
-pub fn mock_supplier_invoices() -> Vec<TransactRow> {
-    vec![mock_supplier_invoice_a(), mock_supplier_invoice_b()]
-}
-
-pub fn mock_transacts() -> Vec<TransactRow> {
-    let mut mock_transacts: Vec<TransactRow> = Vec::new();
-
-    mock_transacts.extend(mock_customer_invoices());
-    mock_transacts.extend(mock_supplier_invoices());
-
-    mock_transacts
-}
diff --git a/src/database/mock/transact_line.rs b/src/database/mock/transact_line.rs
deleted file mode 100644
index 625e92f..0000000
--- a/src/database/mock/transact_line.rs
+++ /dev/null
@@ -1,120 +0,0 @@
-use crate::database::schema::{TransactLineRow, TransactLineRowType};
-
-pub fn mock_customer_invoice_a_transact_lines() -> Vec<TransactLineRow> {
-    let mock_customer_invoice_a_transact_line_a: TransactLineRow = TransactLineRow {
-        id: String::from("customer_invoice_a_line_a"),
-        transact_id: String::from("customer_invoice_a"),
-        item_id: String::from("item_a"),
-        stock_line_id: Some(String::from("item_a_line_a")),
-        type_of: TransactLineRowType::StockOut,
-    };
-
-    let mock_customer_invoice_a_transact_line_b: TransactLineRow = TransactLineRow {
-        id: String::from("customer_invoice_a_line_b"),
-        transact_id: String::from("customer_invoice_a"),
-        item_id: String::from("item_b"),
-        stock_line_id: Some(String::from("item_b_line_a")),
-        type_of: TransactLineRowType::StockOut,
-    };
-
-    vec![
-        mock_customer_invoice_a_transact_line_a,
-        mock_customer_invoice_a_transact_line_b,
-    ]
-}
-
-pub fn mock_customer_invoice_b_transact_lines() -> Vec<TransactLineRow> {
-    let mock_customer_invoice_b_transact_line_a: TransactLineRow = TransactLineRow {
-        id: String::from("customer_invoice_b_line_a"),
-        transact_id: String::from("customer_invoice_b_"),
-        item_id: String::from("item_a"),
-        stock_line_id: Some(String::from("item_a_line_a")),
-        type_of: TransactLineRowType::StockOut,
-    };
-
-    let mock_customer_invoice_b_transact_line_b: TransactLineRow = TransactLineRow {
-        id: String::from("customer_invoice_b_line_b"),
-        transact_id: String::from("customer_invoice_b"),
-        item_id: String::from("item_b"),
-        stock_line_id: Some(String::from("item_b_line_a")),
-        type_of: TransactLineRowType::StockOut,
-    };
-
-    vec![
-        mock_customer_invoice_b_transact_line_a,
-        mock_customer_invoice_b_transact_line_b,
-    ]
-}
-
-pub fn mock_supplier_invoice_a_transact_lines() -> Vec<TransactLineRow> {
-    let mock_supplier_invoice_a_transact_line_a: TransactLineRow = TransactLineRow {
-        id: String::from("supplier_invoice_a_line_a"),
-        transact_id: String::from("supplier_invoice_a"),
-        item_id: String::from("item_a"),
-        stock_line_id: Some(String::from("item_a_line_a")),
-        type_of: TransactLineRowType::StockIn,
-    };
-
-    let mock_supplier_invoice_a_transact_line_b: TransactLineRow = TransactLineRow {
-        id: String::from("supplier_invoice_a_line_b"),
-        transact_id: String::from("supplier_invoice_a"),
-        item_id: String::from("item_b"),
-        stock_line_id: Some(String::from("item_b_line_a")),
-        type_of: TransactLineRowType::StockIn,
-    };
-
-    vec![
-        mock_supplier_invoice_a_transact_line_a,
-        mock_supplier_invoice_a_transact_line_b,
-    ]
-}
-
-pub fn mock_supplier_invoice_b_transact_lines() -> Vec<TransactLineRow> {
-    let mock_supplier_invoice_b_transact_line_a: TransactLineRow = TransactLineRow {
-        id: String::from("supplier_invoice_b_line_a"),
-        transact_id: String::from("supplier_invoice_b_"),
-        item_id: String::from("item_a"),
-        stock_line_id: Some(String::from("item_a_line_a")),
-        type_of: TransactLineRowType::StockIn,
-    };
-
-    let mock_supplier_invoice_b_transact_line_b: TransactLineRow = TransactLineRow {
-        id: String::from("supplier_invoice_b_line_b"),
-        transact_id: String::from("supplier_invoice_b"),
-        item_id: String::from("item_b"),
-        stock_line_id: Some(String::from("item_b_line_a")),
-        type_of: TransactLineRowType::StockIn,
-    };
-
-    vec![
-        mock_supplier_invoice_b_transact_line_a,
-        mock_supplier_invoice_b_transact_line_b,
-    ]
-}
-
-pub fn mock_customer_invoice_transact_lines() -> Vec<TransactLineRow> {
-    let mut mock_customer_invoice_transact_lines = Vec::new();
-
-    mock_customer_invoice_transact_lines.extend(mock_customer_invoice_a_transact_lines());
-    mock_customer_invoice_transact_lines.extend(mock_customer_invoice_b_transact_lines());
-
-    mock_customer_invoice_transact_lines
-}
-
-pub fn mock_supplier_invoice_transact_lines() -> Vec<TransactLineRow> {
-    let mut mock_supplier_invoice_transact_lines = Vec::new();
-
-    mock_supplier_invoice_transact_lines.extend(mock_supplier_invoice_a_transact_lines());
-    mock_supplier_invoice_transact_lines.extend(mock_supplier_invoice_b_transact_lines());
-
-    mock_supplier_invoice_transact_lines
-}
-
-pub fn mock_transact_lines() -> Vec<TransactLineRow> {
-    let mut mock_transact_lines: Vec<TransactLineRow> = Vec::new();
-
-    mock_transact_lines.extend(mock_customer_invoice_transact_lines());
-    mock_transact_lines.extend(mock_supplier_invoice_transact_lines());
-
-    mock_transact_lines
-}
diff --git a/src/database/repository/diesel/mod.rs b/src/database/repository/diesel/mod.rs
index 708e47b..8216051 100644
--- a/src/database/repository/diesel/mod.rs
+++ b/src/database/repository/diesel/mod.rs
@@ -4,6 +4,8 @@ use crate::{
 
 mod central_sync_buffer;
 mod central_sync_cursor;
+mod invoice;
+mod invoice_line;
 mod item;
 mod item_query;
 mod master_list;
@@ -16,14 +18,14 @@ mod requisition_line;
 mod stock_line;
 mod store;
 mod sync;
-mod transact;
-mod transact_line;
 mod user_account;
 
 use actix_rt::blocking::BlockingError;
 use async_graphql::dataloader::DataLoader;
 pub use central_sync_buffer::CentralSyncBufferRepository;
 pub use central_sync_cursor::CentralSyncCursorRepository;
+pub use invoice::{CustomerInvoiceRepository, InvoiceRepository};
+pub use invoice_line::InvoiceLineRepository;
 pub use item::ItemRepository;
 pub use item_query::ItemQueryRepository;
 pub use master_list::MasterListRepository;
@@ -36,8 +38,6 @@ pub use requisition_line::RequisitionLineRepository;
 pub use stock_line::StockLineRepository;
 pub use store::StoreRepository;
 pub use sync::{IntegrationRecord, IntegrationUpsertRecord, SyncRepository, SyncSession};
-pub use transact::{CustomerInvoiceRepository, TransactRepository};
-pub use transact_line::TransactLineRepository;
 pub use user_account::UserAccountRepository;
 
 use diesel::{
@@ -119,8 +119,8 @@ pub async fn get_repositories(settings: &Settings) -> RepositoryMap {
     repositories.insert(RequisitionLineRepository::new(pool.clone()));
     repositories.insert(RequisitionRepository::new(pool.clone()));
     repositories.insert(StoreRepository::new(pool.clone()));
-    repositories.insert(TransactRepository::new(pool.clone()));
-    repositories.insert(TransactLineRepository::new(pool.clone()));
+    repositories.insert(InvoiceRepository::new(pool.clone()));
+    repositories.insert(InvoiceLineRepository::new(pool.clone()));
     repositories.insert(UserAccountRepository::new(pool.clone()));
     repositories.insert(CentralSyncBufferRepository::new(pool.clone()));
     repositories.insert(CentralSyncCursorRepository::new(pool.clone()));
diff --git a/src/database/repository/diesel/transact.rs b/src/database/repository/diesel/transact.rs
deleted file mode 100644
index fc08113..0000000
--- a/src/database/repository/diesel/transact.rs
+++ /dev/null
@@ -1,89 +0,0 @@
-use super::DBBackendConnection;
-
-use crate::database::{
-    repository::{repository::get_connection, RepositoryError},
-    schema::{TransactRow, TransactRowType},
-};
-
-use diesel::{
-    prelude::*,
-    r2d2::{ConnectionManager, Pool},
-};
-
-pub struct TransactRepository {
-    pool: Pool<ConnectionManager<DBBackendConnection>>,
-}
-
-impl TransactRepository {
-    pub fn new(pool: Pool<ConnectionManager<DBBackendConnection>>) -> TransactRepository {
-        TransactRepository { pool }
-    }
-
-    pub async fn insert_one(&self, transact_row: &TransactRow) -> Result<(), RepositoryError> {
-        use crate::database::schema::diesel_schema::transact::dsl::*;
-        let connection = get_connection(&self.pool)?;
-        diesel::insert_into(transact)
-            .values(transact_row)
-            .execute(&connection)?;
-        Ok(())
-    }
-
-    pub async fn find_one_by_id(&self, transact_id: &str) -> Result<TransactRow, RepositoryError> {
-        use crate::database::schema::diesel_schema::transact::dsl::*;
-        let connection = get_connection(&self.pool)?;
-        let result = transact.filter(id.eq(transact_id)).first(&connection);
-        result.map_err(|err| RepositoryError::from(err))
-    }
-
-    pub async fn find_many_by_id(
-        &self,
-        ids: &[String],
-    ) -> Result<Vec<TransactRow>, RepositoryError> {
-        use crate::database::schema::diesel_schema::transact::dsl::*;
-        let connection = get_connection(&self.pool)?;
-        let result = transact.filter(id.eq_any(ids)).load(&connection)?;
-        Ok(result)
-    }
-}
-
-pub struct CustomerInvoiceRepository {
-    pool: Pool<ConnectionManager<DBBackendConnection>>,
-}
-
-impl CustomerInvoiceRepository {
-    pub fn new(pool: Pool<ConnectionManager<DBBackendConnection>>) -> CustomerInvoiceRepository {
-        CustomerInvoiceRepository { pool }
-    }
-
-    pub async fn find_many_by_name_id(
-        &self,
-        name: &str,
-    ) -> Result<Vec<TransactRow>, RepositoryError> {
-        use crate::database::schema::diesel_schema::transact::dsl::*;
-        let connection = get_connection(&self.pool)?;
-        let result = transact
-            .filter(
-                type_of
-                    .eq(TransactRowType::CustomerInvoice)
-                    .and(name_id.eq(name)),
-            )
-            .get_results(&connection)?;
-        Ok(result)
-    }
-
-    pub async fn find_many_by_store_id(
-        &self,
-        store: &str,
-    ) -> Result<Vec<TransactRow>, RepositoryError> {
-        use crate::database::schema::diesel_schema::transact::dsl::*;
-        let connection = get_connection(&self.pool)?;
-        let result = transact
-            .filter(
-                type_of
-                    .eq(TransactRowType::CustomerInvoice)
-                    .and(store_id.eq(store)),
-            )
-            .get_results(&connection)?;
-        Ok(result)
-    }
-}
diff --git a/src/database/repository/diesel/transact_line.rs b/src/database/repository/diesel/transact_line.rs
deleted file mode 100644
index 6ca0f8d..0000000
--- a/src/database/repository/diesel/transact_line.rs
+++ /dev/null
@@ -1,62 +0,0 @@
-use super::DBBackendConnection;
-
-use crate::database::{
-    repository::{repository::get_connection, RepositoryError},
-    schema::TransactLineRow,
-};
-
-use diesel::{
-    prelude::*,
-    r2d2::{ConnectionManager, Pool},
-};
-
-pub struct TransactLineRepository {
-    pool: Pool<ConnectionManager<DBBackendConnection>>,
-}
-
-impl TransactLineRepository {
-    pub fn new(pool: Pool<ConnectionManager<DBBackendConnection>>) -> TransactLineRepository {
-        TransactLineRepository { pool }
-    }
-
-    pub async fn insert_one(
-        &self,
-        transact_line_row: &TransactLineRow,
-    ) -> Result<(), RepositoryError> {
-        use crate::database::schema::diesel_schema::transact_line::dsl::*;
-        let connection = get_connection(&self.pool)?;
-        diesel::insert_into(transact_line)
-            .values(transact_line_row)
-            .execute(&connection)?;
-        Ok(())
-    }
-
-    pub async fn find_one_by_id(&self, row_id: &str) -> Result<TransactLineRow, RepositoryError> {
-        use crate::database::schema::diesel_schema::transact_line::dsl::*;
-        let connection = get_connection(&self.pool)?;
-        let result = transact_line.filter(id.eq(row_id)).first(&connection);
-        result.map_err(|err| RepositoryError::from(err))
-    }
-
-    pub async fn find_many_by_id(
-        &self,
-        ids: &[String],
-    ) -> Result<Vec<TransactLineRow>, RepositoryError> {
-        use crate::database::schema::diesel_schema::transact_line::dsl::*;
-        let connection = get_connection(&self.pool)?;
-        let result = transact_line.filter(id.eq_any(ids)).load(&connection)?;
-        Ok(result)
-    }
-
-    pub async fn find_many_by_transact_id(
-        &self,
-        trans_id: &str,
-    ) -> Result<Vec<TransactLineRow>, RepositoryError> {
-        use crate::database::schema::diesel_schema::transact_line::dsl::*;
-        let connection = get_connection(&self.pool)?;
-        let result = transact_line
-            .filter(transact_id.eq(trans_id))
-            .get_results(&connection)?;
-        Ok(result)
-    }
-}
diff --git a/src/database/repository/tests.rs b/src/database/repository/tests.rs
index 5c534ee..8a54381 100644
--- a/src/database/repository/tests.rs
+++ b/src/database/repository/tests.rs
@@ -144,52 +144,52 @@ mod repository_test {
             }
         }
 
-        pub fn invoice_1() -> TransactRow {
-            TransactRow {
-                id: "transact1".to_string(),
+        pub fn invoice_1() -> InvoiceRow {
+            InvoiceRow {
+                id: "invoice1".to_string(),
                 name_id: name_1().id.to_string(),
                 store_id: store_1().id.to_string(),
                 invoice_number: 12,
-                type_of: TransactRowType::Payment,
+                r#type: InvoiceRowType::CustomerInvoice,
             }
         }
 
-        pub fn invoice_2() -> TransactRow {
-            TransactRow {
-                id: "transact2".to_string(),
+        pub fn invoice_2() -> InvoiceRow {
+            InvoiceRow {
+                id: "invoice2".to_string(),
                 name_id: name_1().id.to_string(),
                 store_id: store_1().id.to_string(),
                 invoice_number: 12,
-                type_of: TransactRowType::CustomerInvoice,
+                r#type: InvoiceRowType::CustomerInvoice,
             }
         }
 
-        pub fn invoice_line_1() -> TransactLineRow {
-            TransactLineRow {
+        pub fn invoice_line_1() -> InvoiceLineRow {
+            InvoiceLineRow {
                 id: "test1".to_string(),
                 item_id: "item1".to_string(),
-                transact_id: "transact1".to_string(),
+                invoice_id: "invoice1".to_string(),
                 stock_line_id: Some("StockLine1".to_string()),
-                type_of: TransactLineRowType::CashOut,
+                r#type: InvoiceLineRowType::CustomerInvoice,
             }
         }
-        pub fn invoice_line_2() -> TransactLineRow {
-            TransactLineRow {
+        pub fn invoice_line_2() -> InvoiceLineRow {
+            InvoiceLineRow {
                 id: "test2-with-optional".to_string(),
                 item_id: "item1".to_string(),
-                transact_id: "transact1".to_string(),
+                invoice_id: "invoice1".to_string(),
                 stock_line_id: None,
-                type_of: TransactLineRowType::CashOut,
+                r#type: InvoiceLineRowType::CustomerInvoice,
             }
         }
 
-        pub fn invoice_line_3() -> TransactLineRow {
-            TransactLineRow {
+        pub fn invoice_line_3() -> InvoiceLineRow {
+            InvoiceLineRow {
                 id: "test3".to_string(),
                 item_id: "item2".to_string(),
-                transact_id: "transact2".to_string(),
+                invoice_id: "invoice2".to_string(),
                 stock_line_id: None,
-                type_of: TransactLineRowType::Placeholder,
+                r#type: InvoiceLineRowType::CustomerInvoice,
             }
         }
 
@@ -236,15 +236,16 @@ mod repository_test {
         database::{
             repository::{
                 get_repositories, repository::MasterListRepository, CentralSyncBufferRepository,
-                CustomerInvoiceRepository, DBBackendConnection, DBConnection, ItemRepository,
-                MasterListLineRepository, MasterListNameJoinRepository, NameRepository,
-                RequisitionLineRepository, RequisitionRepository, StockLineRepository,
-                StoreRepository, TransactLineRepository, TransactRepository, UserAccountRepository,
+                CustomerInvoiceRepository, DBBackendConnection, DBConnection,
+                InvoiceLineRepository, InvoiceRepository, ItemRepository, MasterListLineRepository,
+                MasterListNameJoinRepository, NameRepository, RequisitionLineRepository,
+                RequisitionRepository, StockLineRepository, StoreRepository, UserAccountRepository,
             },
             schema::{
-                CentralSyncBufferRow, ItemRow, MasterListLineRow, MasterListRow, NameRow,
+                CentralSyncBufferRow, InvoiceLineRow, InvoiceLineRowType, InvoiceRow,
+                InvoiceRowType, ItemRow, MasterListLineRow, MasterListRow, NameRow,
                 RequisitionLineRow, RequisitionRow, RequisitionRowType, StockLineRow, StoreRow,
-                TransactLineRow, TransactLineRowType, TransactRow, TransactRowType, UserAccountRow,
+                UserAccountRow,
             },
         },
         util::{settings::Settings, test_db},
@@ -467,7 +468,7 @@ mod repository_test {
         let store_repo = registry.get::<StoreRepository>().unwrap();
         store_repo.insert_one(&data::store_1()).await.unwrap();
 
-        let repo = registry.get::<TransactRepository>().unwrap();
+        let repo = registry.get::<InvoiceRepository>().unwrap();
         let customer_invoice_repo = registry.get::<CustomerInvoiceRepository>().unwrap();
 
         let item1 = data::invoice_1();
@@ -510,11 +511,11 @@ mod repository_test {
             .insert_one(&data::stock_line_1())
             .await
             .unwrap();
-        let invoice_repo = registry.get::<TransactRepository>().unwrap();
+        let invoice_repo = registry.get::<InvoiceRepository>().unwrap();
         invoice_repo.insert_one(&data::invoice_1()).await.unwrap();
         invoice_repo.insert_one(&data::invoice_2()).await.unwrap();
 
-        let repo = registry.get::<TransactLineRepository>().unwrap();
+        let repo = registry.get::<InvoiceLineRepository>().unwrap();
         let item1 = data::invoice_line_1();
         repo.insert_one(&item1).await.unwrap();
         let loaded_item = repo.find_one_by_id(item1.id.as_str()).await.unwrap();
@@ -529,12 +530,12 @@ mod repository_test {
             .unwrap();
         assert_eq!(item2_optional, loaded_item);
 
-        // find_many_by_transact_id:
+        // find_many_by_invoice_id:
         // add item that shouldn't end up in the results:
         let item3 = data::invoice_line_3();
         repo.insert_one(&item3).await.unwrap();
         let all_items = repo
-            .find_many_by_transact_id(&item1.transact_id)
+            .find_many_by_invoice_id(&item1.invoice_id)
             .await
             .unwrap();
         assert_eq!(2, all_items.len());
diff --git a/src/database/schema/diesel_schema.rs b/src/database/schema/diesel_schema.rs
index 75d7229..a8b70dd 100644
--- a/src/database/schema/diesel_schema.rs
+++ b/src/database/schema/diesel_schema.rs
@@ -87,22 +87,34 @@ table! {
 }
 
 table! {
-    transact (id) {
+    invoice (id) {
         id -> Text,
         name_id -> Text,
         store_id -> Text,
         invoice_number -> Integer,
-        type_of -> crate::database::schema::transact::TransactRowTypeMapping,
+        #[sql_name = "type"] type_ -> crate::database::schema::invoice::InvoiceRowTypeMapping,
+        status -> crate::database::schema::invoice::InvoiceRowStatusMapping,
+        comment -> Nullable<Text>,
+        their_reference -> Nullable<Text>,
+        entry_datetime -> Text,
+        confirm_datetime -> Nullable<Text>,
+        finalised_datetime -> Nullable<Text>,
     }
 }
 
 table! {
-    transact_line (id) {
+    invoice_line (id) {
         id -> Text,
-        transact_id -> Text,
+        invoice_id -> Text,
         item_id -> Text,
         stock_line_id -> Nullable<Text>,
-        type_of -> crate::database::schema::transact_line::TransactLineRowTypeMapping,
+        batch -> Nullable<Text>,
+        expiry_date -> Nullable<Text>,
+        pack_size -> Integer,
+        cost_price_per_pack -> Double,
+        sell_price_per_pack -> Double,
+        available_number_of_packs -> Integer,
+        total_number_of_packs -> Integer,
     }
 }
 
@@ -158,11 +170,11 @@ joinable!(requisition_line -> item (item_id));
 joinable!(requisition_line -> requisition (requisition_id));
 joinable!(store -> name_table (name_id));
 joinable!(sync_out -> store (store_id));
-joinable!(transact -> name_table (name_id));
-joinable!(transact -> store (store_id));
-joinable!(transact_line -> item (item_id));
-joinable!(transact_line -> stock_line (stock_line_id));
-joinable!(transact_line -> transact (transact_id));
+joinable!(invoice -> name_table (name_id));
+joinable!(invoice -> store (store_id));
+joinable!(invoice_line -> item (item_id));
+joinable!(invoice_line -> stock_line (stock_line_id));
+joinable!(invoice_line -> invoice (invoice_id));
 joinable!(name_store_join -> store (store_id));
 joinable!(name_store_join -> name_table (name_id));
 joinable!(master_list_line -> master_list (master_list_id));
@@ -180,8 +192,8 @@ allow_tables_to_appear_in_same_query!(
     requisition_line,
     store,
     sync_out,
-    transact,
-    transact_line,
+    invoice,
+    invoice_line,
     user_account,
     name_store_join,
     master_list_line,
diff --git a/src/database/schema/mod.rs b/src/database/schema/mod.rs
index 108aa2b..8c7179e 100644
--- a/src/database/schema/mod.rs
+++ b/src/database/schema/mod.rs
@@ -1,19 +1,19 @@
 mod central_sync_buffer;
 mod central_sync_cursor;
+mod invoice;
+mod invoice_line;
 mod item;
-mod stock_line;
 mod master_list;
 mod master_list_line;
 mod master_list_name_join;
 mod name;
+mod name_store_join;
 mod requisition;
 mod requisition_line;
+mod stock_line;
 mod store;
 mod sync_out;
-mod transact;
-mod transact_line;
 mod user_account;
-mod name_store_join;
 
 pub mod diesel_schema;
 
@@ -25,25 +25,25 @@ pub enum DatabaseRow {
     Requisition(RequisitionRow),
     RequisitionLine(RequisitionLineRow),
     Store(StoreRow),
-    Transact(TransactRow),
-    TransactLine(TransactLineRow),
+    Invoice(InvoiceRow),
+    InvoiceLine(InvoiceLineRow),
     UserAccount(UserAccountRow),
     SyncOut(SyncOutRow),
 }
 
 pub use central_sync_buffer::CentralSyncBufferRow;
 pub use central_sync_cursor::CentralSyncCursorRow;
+pub use invoice::{InvoiceRow, InvoiceRowStatus, InvoiceRowType};
+pub use invoice_line::InvoiceLineRow;
 pub use item::ItemRow;
-pub use stock_line::StockLineRow;
 pub use master_list::MasterListRow;
 pub use master_list_line::MasterListLineRow;
 pub use master_list_name_join::MasterListNameJoinRow;
 pub use name::NameRow;
-pub use requisition::{RequisitionRow, RequisitionRowType};
+pub use name_store_join::NameStoreJoinRow;
+pub use requisition::RequisitionRow;
 pub use requisition_line::RequisitionLineRow;
+pub use stock_line::StockLineRow;
 pub use store::StoreRow;
 pub use sync_out::{SyncOutRow, SyncOutRowActionType, SyncOutRowTableNameType};
-pub use transact::{TransactRow, TransactRowType};
-pub use transact_line::{TransactLineRow, TransactLineRowType};
 pub use user_account::UserAccountRow;
-pub use name_store_join::NameStoreJoinRow;
diff --git a/src/database/schema/sync_out.rs b/src/database/schema/sync_out.rs
index c8c8336..977dc66 100644
--- a/src/database/schema/sync_out.rs
+++ b/src/database/schema/sync_out.rs
@@ -7,8 +7,8 @@ pub enum SyncOutRowTableNameType {
     RequisitionLine,
     Item,
     StockLine,
-    Transact,
-    TransactLine,
+    Invoice,
+    InvoiceLine,
     Name,
     Store,
 }
diff --git a/src/database/schema/transact.rs b/src/database/schema/transact.rs
deleted file mode 100644
index 3b6d8c4..0000000
--- a/src/database/schema/transact.rs
+++ /dev/null
@@ -1,24 +0,0 @@
-use super::diesel_schema::transact;
-use diesel_derive_enum::DbEnum;
-
-#[derive(DbEnum, Debug, Clone, PartialEq, Eq)]
-pub enum TransactRowType {
-    CustomerInvoice,
-    CustomerCredit,
-    SupplierInvoice,
-    SupplierCredit,
-    Repack,
-    Build,
-    Receipt,
-    Payment,
-}
-
-#[derive(Clone, Queryable, Insertable, Debug, PartialEq, Eq)]
-#[table_name = "transact"]
-pub struct TransactRow {
-    pub id: String,
-    pub name_id: String,
-    pub store_id: String,
-    pub invoice_number: i32,
-    pub type_of: TransactRowType,
-}
diff --git a/src/database/schema/transact_line.rs b/src/database/schema/transact_line.rs
deleted file mode 100644
index 091c528..0000000
--- a/src/database/schema/transact_line.rs
+++ /dev/null
@@ -1,23 +0,0 @@
-use super::diesel_schema::transact_line;
-use diesel_derive_enum::DbEnum;
-
-#[derive(DbEnum, Debug, Clone, PartialEq, Eq)]
-pub enum TransactLineRowType {
-    StockOut,
-    StockIn,
-    Placeholder,
-    CashIn,
-    CashOut,
-    NonStock,
-    Service,
-}
-
-#[derive(Clone, Queryable, Insertable, Debug, PartialEq, Eq)]
-#[table_name = "transact_line"]
-pub struct TransactLineRow {
-    pub id: String,
-    pub transact_id: String,
-    pub item_id: String,
-    pub stock_line_id: Option<String>,
-    pub type_of: TransactLineRowType,
-}
diff --git a/src/server/service/graphql/schema/queries/mod.rs b/src/server/service/graphql/schema/queries/mod.rs
index f8954c3..4b34791 100644
--- a/src/server/service/graphql/schema/queries/mod.rs
+++ b/src/server/service/graphql/schema/queries/mod.rs
@@ -1,10 +1,10 @@
 pub mod pagination;
 
 use crate::database::repository::{
-    RequisitionRepository, StoreRepository, TransactLineRepository, TransactRepository,
+    InvoiceLineRepository, InvoiceRepository, RequisitionRepository, StoreRepository,
 };
-use crate::database::schema::{RequisitionRow, StoreRow, TransactLineRow, TransactRow};
-use crate::server::service::graphql::schema::types::{Requisition, Store, Transact, TransactLine};
+use crate::database::schema::{InvoiceLineRow, InvoiceRow, RequisitionRow, StoreRow};
+use crate::server::service::graphql::schema::types::{Invoice, InvoiceLine, Requisition, Store};
 use crate::server::service::graphql::ContextExt;
 
 use super::types::{ItemList, NameList};
@@ -50,34 +50,34 @@ impl Queries {
         Store { store_row }
     }
 
-    pub async fn transact(
+    pub async fn invoice(
         &self,
         ctx: &Context<'_>,
-        #[graphql(desc = "id of the transact")] id: String,
-    ) -> Transact {
-        let transact_repository = ctx.get_repository::<TransactRepository>();
+        #[graphql(desc = "id of the invoice")] id: String,
+    ) -> Invoice {
+        let invoice_repository = ctx.get_repository::<InvoiceRepository>();
 
-        let transact_row: TransactRow = transact_repository
+        let invoice_row: InvoiceRow = invoice_repository
             .find_one_by_id(&id)
             .await
-            .unwrap_or_else(|_| panic!("Failed to get transact {}", id));
+            .unwrap_or_else(|_| panic!("Failed to get invoice {}", id));
 
-        Transact { transact_row }
+        Invoice { invoice_row }
     }
 
-    pub async fn transact_line(
+    pub async fn invoice_line(
         &self,
         ctx: &Context<'_>,
-        #[graphql(desc = "id of the transact line")] id: String,
-    ) -> TransactLine {
-        let transact_line_repository = ctx.get_repository::<TransactLineRepository>();
+        #[graphql(desc = "id of the invoice line")] id: String,
+    ) -> InvoiceLine {
+        let invoice_line_repository = ctx.get_repository::<InvoiceLineRepository>();
 
-        let transact_line_row: TransactLineRow = transact_line_repository
+        let invoice_line_row: InvoiceLineRow = invoice_line_repository
             .find_one_by_id(&id)
             .await
-            .unwrap_or_else(|_| panic!("Failed to get transact line {}", id));
+            .unwrap_or_else(|_| panic!("Failed to get invoice line {}", id));
 
-        TransactLine { transact_line_row }
+        InvoiceLine { invoice_line_row }
     }
 
     pub async fn requisition(
diff --git a/src/server/service/graphql/schema/types/mod.rs b/src/server/service/graphql/schema/types/mod.rs
index 067b334..820a2fe 100644
--- a/src/server/service/graphql/schema/types/mod.rs
+++ b/src/server/service/graphql/schema/types/mod.rs
@@ -1,12 +1,10 @@
 use crate::{
     database::{
-        loader::{StoreLoader, TransactLoader},
-        repository::{
-            CustomerInvoiceRepository, RequisitionLineRepository, TransactLineRepository,
-        },
+        loader::{InvoiceLoader, StoreLoader},
+        repository::{CustomerInvoiceRepository, InvoiceLineRepository, RequisitionLineRepository},
         schema::{
-            RequisitionLineRow, RequisitionRow, RequisitionRowType, StoreRow, TransactLineRow,
-            TransactRow, TransactRowType,
+            InvoiceLineRow, InvoiceRow, InvoiceRowType, RequisitionLineRow, RequisitionRow,
+            RequisitionRowType, StoreRow,
         },
     },
     server::service::graphql::ContextExt,
@@ -36,10 +34,10 @@ impl Store {
         &self.store_row.id
     }
 
-    pub async fn customer_invoices(&self, ctx: &Context<'_>) -> Vec<Transact> {
+    pub async fn customer_invoices(&self, ctx: &Context<'_>) -> Vec<Invoice> {
         let customer_invoice_repository = ctx.get_repository::<CustomerInvoiceRepository>();
 
-        let customer_invoice_rows: Vec<TransactRow> = customer_invoice_repository
+        let customer_invoice_rows: Vec<InvoiceRow> = customer_invoice_repository
             .find_many_by_store_id(&self.store_row.id)
             .await
             .unwrap_or_else(|_| {
@@ -51,8 +49,8 @@ impl Store {
 
         customer_invoice_rows
             .into_iter()
-            .map(|customer_invoice_row| Transact {
-                transact_row: customer_invoice_row,
+            .map(|customer_invoice_row| Invoice {
+                invoice_row: customer_invoice_row,
             })
             .collect()
     }
@@ -139,10 +137,6 @@ impl Requisition {
         Store { store_row }
     }
 
-    pub async fn type_of(&self) -> RequisitionType {
-        self.requisition_row.type_of.clone().into()
-    }
-
     pub async fn requisition_lines(&self, ctx: &Context<'_>) -> Vec<RequisitionLine> {
         let requisition_line_repository = ctx.get_repository::<RequisitionLineRepository>();
 
@@ -186,131 +180,105 @@ impl RequisitionLine {
 }
 
 #[derive(Enum, Copy, Clone, PartialEq, Eq)]
-pub enum TransactType {
-    #[graphql(name = "customer_invoice")]
+pub enum InvoiceType {
     CustomerInvoice,
-    #[graphql(name = "customer_credit")]
-    CustomerCredit,
-    #[graphql(name = "supplier_invoice")]
     SupplierInvoice,
-    #[graphql(name = "supplier_credit")]
-    SupplierCredit,
-    #[graphql(name = "repack")]
-    Repack,
-    #[graphql(name = "build")]
-    Build,
-    #[graphql(name = "receipt")]
-    Receipt,
-    #[graphql(name = "payment")]
-    Payment,
 }
 
-impl From<TransactRowType> for TransactType {
-    fn from(transact_row_type: TransactRowType) -> TransactType {
-        match transact_row_type {
-            TransactRowType::CustomerInvoice => TransactType::CustomerInvoice,
-            TransactRowType::CustomerCredit => TransactType::CustomerCredit,
-            TransactRowType::SupplierInvoice => TransactType::SupplierInvoice,
-            TransactRowType::SupplierCredit => TransactType::SupplierCredit,
-            TransactRowType::Repack => TransactType::Repack,
-            TransactRowType::Build => TransactType::Build,
-            TransactRowType::Receipt => TransactType::Receipt,
-            TransactRowType::Payment => TransactType::Payment,
+impl From<InvoiceRowType> for InvoiceType {
+    fn from(invoice_row_type: InvoiceRowType) -> InvoiceType {
+        match invoice_row_type {
+            InvoiceRowType::CustomerInvoice => InvoiceType::CustomerInvoice,
+            InvoiceRowType::SupplierInvoice => InvoiceType::SupplierInvoice,
         }
     }
 }
 
-impl From<TransactType> for TransactRowType {
-    fn from(transact_type: TransactType) -> TransactRowType {
-        match transact_type {
-            TransactType::CustomerInvoice => TransactRowType::CustomerInvoice,
-            TransactType::CustomerCredit => TransactRowType::CustomerCredit,
-            TransactType::SupplierInvoice => TransactRowType::SupplierInvoice,
-            TransactType::SupplierCredit => TransactRowType::SupplierCredit,
-            TransactType::Repack => TransactRowType::Repack,
-            TransactType::Build => TransactRowType::Build,
-            TransactType::Receipt => TransactRowType::Receipt,
-            TransactType::Payment => TransactRowType::Payment,
+impl From<InvoiceType> for InvoiceRowType {
+    fn from(invoice_type: InvoiceType) -> InvoiceRowType {
+        match invoice_type {
+            InvoiceType::CustomerInvoice => InvoiceRowType::CustomerInvoice,
+            InvoiceType::SupplierInvoice => InvoiceRowType::SupplierInvoice,
         }
     }
 }
 
 #[derive(Clone)]
-pub struct Transact {
-    pub transact_row: TransactRow,
+pub struct Invoice {
+    pub invoice_row: InvoiceRow,
 }
 
 #[Object]
-impl Transact {
+impl Invoice {
     pub async fn id(&self) -> String {
-        self.transact_row.id.to_string()
+        self.invoice_row.id.to_string()
     }
 
     pub async fn invoice_number(&self) -> i32 {
-        self.transact_row.invoice_number
+        self.invoice_row.invoice_number
     }
 
-    pub async fn type_of(&self) -> TransactType {
-        self.transact_row.type_of.clone().into()
+    pub async fn r#type(&self) -> InvoiceType {
+        self.invoice_row.r#type.clone().into()
     }
 
-    pub async fn transact_lines(&self, ctx: &Context<'_>) -> Vec<TransactLine> {
-        let transact_line_repository = ctx.get_repository::<TransactLineRepository>();
+    pub async fn invoice_lines(&self, ctx: &Context<'_>) -> Vec<InvoiceLine> {
+        let invoice_line_repository = ctx.get_repository::<InvoiceLineRepository>();
 
-        let transact_line_rows: Vec<TransactLineRow> = transact_line_repository
-            .find_many_by_transact_id(&self.transact_row.id)
+        let invoice_line_rows: Vec<InvoiceLineRow> = invoice_line_repository
+            .find_many_by_invoice_id(&self.invoice_row.id)
             .await
             .unwrap_or_else(|_| {
                 panic!(
-                    "Failed to get transact_lines for transact {}",
-                    self.transact_row.id
+                    "Failed to get invoice_lines for invoice {}",
+                    self.invoice_row.id
                 )
             });
 
-        transact_line_rows
+        invoice_line_rows
             .into_iter()
-            .map(|transact_line_row| TransactLine { transact_line_row })
+            .map(|invoice_line_row| InvoiceLine { invoice_line_row })
             .collect()
     }
 }
 
 #[derive(Clone)]
-pub struct TransactLine {
-    pub transact_line_row: TransactLineRow,
+pub struct InvoiceLine {
+    pub invoice_line_row: InvoiceLineRow,
 }
 
 #[Object]
-impl TransactLine {
+impl InvoiceLine {
     pub async fn id(&self) -> &str {
-        &self.transact_line_row.id
+        &self.invoice_line_row.id
     }
 
-    pub async fn transact(&self, ctx: &Context<'_>) -> Transact {
-        let transact_loader = ctx.get_loader::<DataLoader<TransactLoader>>();
+    pub async fn invoice(&self, ctx: &Context<'_>) -> Invoice {
+        let invoice_loader = ctx.get_loader::<DataLoader<InvoiceLoader>>();
 
-        let transact_row: TransactRow = transact_loader
-            .load_one(self.transact_line_row.transact_id.clone())
+        let invoice_row: InvoiceRow = invoice_loader
+            .load_one(self.invoice_line_row.invoice_id.clone())
             .await
             .unwrap_or_else(|_| {
                 panic!(
-                    "Failed to get transact for transact_line {}",
-                    self.transact_line_row.id
+                    "Failed to get invoice for invoice_line {}",
+                    self.invoice_line_row.id
                 )
             })
             .ok_or_else(|| {
                 panic!(
-                    "Failed to get transact for transact_line {}",
-                    self.transact_line_row.id
+                    "Failed to get invoice for invoice_line {}",
+                    self.invoice_line_row.id
                 )
             })
             .unwrap_or_else(|_| {
                 panic!(
-                    "Failed to get transact for transact_line {}",
-                    self.transact_line_row.id
+                    "Failed to get invoice for invoice_line {}",
+                    self.invoice_line_row.id
                 )
             });
 
-        Transact { transact_row }
+        Invoice { invoice_row }
     }
 }
 
