type AccessDenied implements UserErrorInterface & LogoutErrorInterface {
	description: String!
	fullError: String!
}
type AuthToken {
	"""
	Bearer token
	"""
	token: String!
}
"""
Generic Error Wrapper
"""
type AuthTokenError {
	error: AuthTokenErrorInterface!
}
interface AuthTokenErrorInterface {
	description: String!
}
union AuthTokenResponse = | AuthTokenError | AuthToken
type BatchInboundShipmentResponse {
	insertInboundShipments: [InsertInboundShipmentResponseWithId!]
	insertInboundShipmentLines: [InsertInboundShipmentLineResponseWithId!]
	updateInboundShipmentLines: [UpdateInboundShipmentLineResponseWithId!]
	deleteInboundShipmentLines: [DeleteInboundShipmentLineResponseWithId!]
	updateInboundShipments: [UpdateInboundShipmentResponseWithId!]
	deleteInboundShipments: [DeleteInboundShipmentResponseWithId!]
}
type BatchIsReserved implements UpdateInboundShipmentLineErrorInterface & DeleteInboundShipmentLineErrorInterface {
	description: String!
}
type BatchOutboundShipmentResponse {
	insertOutboundShipments: [InsertOutboundShipmentResponseWithId!]
	insertOutboundShipmentLines: [InsertOutboundShipmentLineResponseWithId!]
	updateOutboundShipmentLines: [UpdateOutboundShipmentLineResponseWithId!]
	deleteOutboundShipmentLines: [DeleteOutboundShipmentLineResponseWithId!]
	updateOutboundShipments: [UpdateOutboundShipmentResponseWithId!]
	deleteOutboundShipments: [DeleteOutboundShipmentResponseWithId!]
}
type CanOnlyEditInvoicesInLoggedInStoreError implements UpdateOutboundShipmentErrorInterface {
	description: String!
}
type CannotChangeInvoiceBackToDraft implements UpdateInboundShipmentErrorInterface {
	description: String!
}
type CannotChangeStatusBackToDraftError implements UpdateOutboundShipmentErrorInterface {
	description: String!
}
type CannotChangeStatusOfInvoiceOnHold implements UpdateInboundShipmentErrorInterface & UpdateOutboundShipmentErrorInterface {
	description: String!
}
type CannotDeleteInvoiceWithLines implements DeleteInboundShipmentErrorInterface & DeleteOutboundShipmentErrorInterface {
	description: String!
	lines: InvoiceLineConnector!
}
type CannotEditFinalisedInvoice implements DeleteOutboundShipmentErrorInterface & UpdateOutboundShipmentLineErrorInterface & DeleteInboundShipmentErrorInterface & UpdateInboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface & DeleteOutboundShipmentLineErrorInterface & DeleteInboundShipmentLineErrorInterface & InsertInboundShipmentLineErrorInterface & UpdateInboundShipmentErrorInterface {
	description: String!
}
"""
Generic Error Wrapper
"""
type ConnectorError {
	error: ConnectorErrorInterface!
}
interface ConnectorErrorInterface {
	description: String!
}
type DatabaseError implements InsertInboundShipmentLineErrorInterface & DeleteOutboundShipmentLineErrorInterface & InsertOutboundShipmentErrorInterface & AuthTokenErrorInterface & DeleteOutboundShipmentErrorInterface & UpdateOutboundShipmentLineErrorInterface & DeleteInboundShipmentErrorInterface & UpdateInboundShipmentLineErrorInterface & ConnectorErrorInterface & InsertInboundShipmentErrorInterface & UserRegisterErrorInterface & InsertOutboundShipmentLineErrorInterface & DeleteInboundShipmentLineErrorInterface & RefreshTokenErrorInterface & UpdateInboundShipmentErrorInterface & UpdateOutboundShipmentErrorInterface & NodeErrorInterface & UserErrorInterface {
	description: String!
	fullError: String!
}
"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime
input DatetimeFilterInput {
	equalTo: DateTime
	beforeOrEqualTo: DateTime
	afterOrEqualTo: DateTime
}
"""
Generic Error Wrapper
"""
type DeleteInboundShipmentError {
	error: DeleteInboundShipmentErrorInterface!
}
interface DeleteInboundShipmentErrorInterface {
	description: String!
}
input DeleteInboundShipmentInput {
	id: String!
}
"""
Generic Error Wrapper
"""
type DeleteInboundShipmentLineError {
	error: DeleteInboundShipmentLineErrorInterface!
}
interface DeleteInboundShipmentLineErrorInterface {
	description: String!
}
input DeleteInboundShipmentLineInput {
	id: String!
	invoiceId: String!
}
union DeleteInboundShipmentLineResponse = | DeleteInboundShipmentLineError | DeleteResponse
type DeleteInboundShipmentLineResponseWithId {
	id: String!
	response: DeleteInboundShipmentLineResponse!
}
union DeleteInboundShipmentResponse = | DeleteInboundShipmentError | DeleteResponse
type DeleteInboundShipmentResponseWithId {
	id: String!
	response: DeleteInboundShipmentResponse!
}
"""
Generic Error Wrapper
"""
type DeleteOutboundShipmentError {
	error: DeleteOutboundShipmentErrorInterface!
}
interface DeleteOutboundShipmentErrorInterface {
	description: String!
}
"""
Generic Error Wrapper
"""
type DeleteOutboundShipmentLineError {
	error: DeleteOutboundShipmentLineErrorInterface!
}
interface DeleteOutboundShipmentLineErrorInterface {
	description: String!
}
input DeleteOutboundShipmentLineInput {
	id: String!
	invoiceId: String!
}
union DeleteOutboundShipmentLineResponse = | DeleteOutboundShipmentLineError | DeleteResponse
type DeleteOutboundShipmentLineResponseWithId {
	id: String!
	response: DeleteOutboundShipmentLineResponse!
}
union DeleteOutboundShipmentResponse = | DeleteOutboundShipmentError | DeleteResponse
type DeleteOutboundShipmentResponseWithId {
	id: String!
	response: DeleteOutboundShipmentResponse!
}
type DeleteResponse {
	id: String!
}
input EqualFilterBooleanInput {
	equalTo: Boolean
}
input EqualFilterInvoiceStatusInput {
	equalTo: InvoiceNodeStatus
}
input EqualFilterInvoiceTypeInput {
	equalTo: InvoiceNodeType
}
input EqualFilterNumberInput {
	equalTo: Int
}
input EqualFilterStringInput {
	equalTo: String
}
type FinalisedInvoiceIsNotEditableError implements UpdateOutboundShipmentErrorInterface {
	description: String!
}
enum ForeignKey {
	otherPartyId
	itemId
	invoiceId
	stockLineId
	locationId
}
type ForeignKeyError implements InsertOutboundShipmentLineErrorInterface & UpdateInboundShipmentErrorInterface & InsertInboundShipmentLineErrorInterface & UpdateOutboundShipmentErrorInterface & UpdateInboundShipmentLineErrorInterface & DeleteOutboundShipmentLineErrorInterface & DeleteInboundShipmentLineErrorInterface & InsertInboundShipmentErrorInterface & UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentErrorInterface {
	description: String!
	key: ForeignKey!
}
"""
Generic Error Wrapper
"""
type InsertInboundShipmentError {
	error: InsertInboundShipmentErrorInterface!
}
interface InsertInboundShipmentErrorInterface {
	description: String!
}
input InsertInboundShipmentInput {
	id: String!
	otherPartyId: String!
	status: InvoiceNodeStatus!
	onHold: Boolean
	comment: String
	theirReference: String
	color: String
}
"""
Generic Error Wrapper
"""
type InsertInboundShipmentLineError {
	error: InsertInboundShipmentLineErrorInterface!
}
interface InsertInboundShipmentLineErrorInterface {
	description: String!
}
input InsertInboundShipmentLineInput {
	id: String!
	invoiceId: String!
	itemId: String!
	packSize: Int!
	batch: String
	locationId: String
	costPricePerPack: Float!
	sellPricePerPack: Float!
	expiryDate: NaiveDate
	numberOfPacks: Int!
}
union InsertInboundShipmentLineResponse = | InsertInboundShipmentLineError | NodeError | InvoiceLineNode
type InsertInboundShipmentLineResponseWithId {
	id: String!
	response: InsertInboundShipmentLineResponse!
}
union InsertInboundShipmentResponse = | InsertInboundShipmentError | NodeError | InvoiceNode
type InsertInboundShipmentResponseWithId {
	id: String!
	response: InsertInboundShipmentResponse!
}
"""
Generic Error Wrapper
"""
type InsertOutboundShipmentError {
	error: InsertOutboundShipmentErrorInterface!
}
interface InsertOutboundShipmentErrorInterface {
	description: String!
}
input InsertOutboundShipmentInput {
	"""
	The new invoice id provided by the client
	"""
	id: String!
	"""
	The other party must be an customer of the current store
	"""
	otherPartyId: String!
	status: InvoiceNodeStatus
	onHold: Boolean
	comment: String
	theirReference: String
	color: String
}
"""
Generic Error Wrapper
"""
type InsertOutboundShipmentLineError {
	error: InsertOutboundShipmentLineErrorInterface!
}
interface InsertOutboundShipmentLineErrorInterface {
	description: String!
}
input InsertOutboundShipmentLineInput {
	id: String!
	invoiceId: String!
	itemId: String!
	stockLineId: String!
	numberOfPacks: Int!
}
union InsertOutboundShipmentLineResponse = | InsertOutboundShipmentLineError | NodeError | InvoiceLineNode
type InsertOutboundShipmentLineResponseWithId {
	id: String!
	response: InsertOutboundShipmentLineResponse!
}
union InsertOutboundShipmentResponse = | InsertOutboundShipmentError | NodeError | InvoiceNode
type InsertOutboundShipmentResponseWithId {
	id: String!
	response: InsertOutboundShipmentResponse!
}
type InternalError implements UserErrorInterface & RefreshTokenErrorInterface & UserRegisterErrorInterface & AuthTokenErrorInterface & LogoutErrorInterface {
	description: String!
	fullError: String!
}
type InvalidCredentials implements AuthTokenErrorInterface {
	description: String!
}
type InvalidToken implements RefreshTokenErrorInterface {
	description: String!
}
"""
Generic Connector
"""
type InvoiceConnector {
	totalCount: Int!
	nodes: [InvoiceNode!]!
}
type InvoiceDoesNotBelongToCurrentStore implements UpdateInboundShipmentLineErrorInterface & DeleteInboundShipmentLineErrorInterface & InsertInboundShipmentLineErrorInterface & DeleteOutboundShipmentErrorInterface & DeleteOutboundShipmentLineErrorInterface & UpdateInboundShipmentErrorInterface & UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface & DeleteInboundShipmentErrorInterface {
	description: String!
}
input InvoiceFilterInput {
	invoiceNumber: EqualFilterNumberInput
	nameId: EqualFilterStringInput
	storeId: EqualFilterStringInput
	type: EqualFilterInvoiceTypeInput
	status: EqualFilterInvoiceStatusInput
	comment: SimpleStringFilterInput
	theirReference: EqualFilterStringInput
	entryDatetime: DatetimeFilterInput
	confirmDatetime: DatetimeFilterInput
	finalisedDatetime: DatetimeFilterInput
}
type InvoiceLineBelongsToAnotherInvoice implements DeleteInboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface & DeleteOutboundShipmentLineErrorInterface & UpdateInboundShipmentLineErrorInterface {
	description: String!
	invoice: InvoiceResponse!
}
"""
Generic Connector
"""
type InvoiceLineConnector {
	totalCount: Int!
	nodes: [InvoiceLineNode!]!
}
type InvoiceLineHasNoStockLineError implements UpdateOutboundShipmentErrorInterface {
	description: String!
	invoiceLineId: String!
}
type InvoiceLineNode {
	id: String!
	itemId: String!
	itemName: String!
	itemCode: String!
	packSize: Int!
	numberOfPacks: Int!
	costPricePerPack: Float!
	sellPricePerPack: Float!
	batch: String
	expiryDate: NaiveDate
	note: String
	locationName: String
	locationId: String
	stockLine: StockLineResponse
}
union InvoiceLineResponse = | NodeError | InvoiceLineNode
union InvoiceLinesResponse = | ConnectorError | InvoiceLineConnector
type InvoiceNode {
	id: String!
	otherPartyName: String!
	otherPartyId: String!
	type: InvoiceNodeType!
	status: InvoiceNodeStatus!
	invoiceNumber: Int!
	theirReference: String
	comment: String
	onHold: Boolean!
	entryDatetime: DateTime!
	confirmedDatetime: DateTime
	finalisedDatetime: DateTime
	color: String
	lines: InvoiceLinesResponse!
	pricing: InvoicePriceResponse!
	otherParty: NameResponse!
}
enum InvoiceNodeStatus {
	DRAFT
	CONFIRMED
	FINALISED
}
enum InvoiceNodeType {
	OUTBOUND_SHIPMENT
	INBOUND_SHIPMENT
}
union InvoicePriceResponse = | NodeError | InvoicePricingNode
type InvoicePricingNode {
	totalAfterTax: Float!
}
union InvoiceResponse = | NodeError | InvoiceNode
enum InvoiceSortFieldInput {
	type
	otherPartyName
	invoiceNumber
	comment
	status
	entryDatetime
	confirmDatetime
	finalisedDateTime
}
input InvoiceSortInput {
	"""
	Sort query result by `key`
	"""
	key: InvoiceSortFieldInput!
	"""
	Sort query result is sorted descending or ascending (if not provided the default is
ascending)
	"""
	desc: Boolean
}
union InvoicesResponse = | ConnectorError | InvoiceConnector
"""
Generic Connector
"""
type ItemConnector {
	totalCount: Int!
	nodes: [ItemNode!]!
}
type ItemDoesNotMatchStockLine implements InsertOutboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface {
	description: String!
}
input ItemFilterInput {
	name: SimpleStringFilterInput
	code: SimpleStringFilterInput
	isVisible: EqualFilterBooleanInput
}
type ItemNode {
	id: String!
	name: String!
	code: String!
	isVisible: Boolean!
	unitName: String
	availableBatches: StockLinesResponse!
}
enum ItemSortFieldInput {
	name
	code
}
input ItemSortInput {
	"""
	Sort query result by `key`
	"""
	key: ItemSortFieldInput!
	"""
	Sort query result is sorted descending or ascending (if not provided the default is
ascending)
	"""
	desc: Boolean
}
union ItemsResponse = | ConnectorError | ItemConnector
type LineDoesNotReferenceStockLine implements UpdateOutboundShipmentLineErrorInterface {
	description: String!
}
"""
Generic Connector
"""
type LocationConnector {
	totalCount: Int!
	nodes: [LocationNode!]!
}
input LocationFilterInput {
	name: EqualFilterStringInput
	code: EqualFilterStringInput
	id: EqualFilterStringInput
}
type LocationIsOnHold implements UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface {
	description: String!
}
type LocationNode {
	id: String!
	name: String!
	code: String!
	onHold: Boolean!
}
type LocationNotFound implements UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface {
	description: String!
}
enum LocationSortFieldInput {
	name
	code
}
input LocationSortInput {
	"""
	Sort query result by `key`
	"""
	key: LocationSortFieldInput!
	"""
	Sort query result is sorted descending or ascending (if not provided the default is
ascending)
	"""
	desc: Boolean
}
union LocationsResponse = | ConnectorError | LocationConnector
type Logout {
	"""
	User id of the logged out user
	"""
	userId: String!
}
"""
Generic Error Wrapper
"""
type LogoutError {
	error: LogoutErrorInterface!
}
interface LogoutErrorInterface {
	description: String!
}
union LogoutResponse = | LogoutError | Logout
type Mutations {
	registerUser(input: UserRegisterInput!): UserRegisterResponse!
	insertOutboundShipment(input: InsertOutboundShipmentInput!): InsertOutboundShipmentResponse!
	updateOutboundShipment(input: UpdateOutboundShipmentInput!): UpdateOutboundShipmentResponse!
	deleteOutboundShipment(id: String!): DeleteOutboundShipmentResponse!
	insertOutboundShipmentLine(input: InsertOutboundShipmentLineInput!): InsertOutboundShipmentLineResponse!
	updateOutboundShipmentLine(input: UpdateOutboundShipmentLineInput!): UpdateOutboundShipmentLineResponse!
	deleteOutboundShipmentLine(input: DeleteOutboundShipmentLineInput!): DeleteOutboundShipmentLineResponse!
	insertInboundShipment(input: InsertInboundShipmentInput!): InsertInboundShipmentResponse!
	updateInboundShipment(input: UpdateInboundShipmentInput!): UpdateInboundShipmentResponse!
	deleteInboundShipment(input: DeleteInboundShipmentInput!): DeleteInboundShipmentResponse!
	insertInboundShipmentLine(input: InsertInboundShipmentLineInput!): InsertInboundShipmentLineResponse!
	updateInboundShipmentLine(input: UpdateInboundShipmentLineInput!): UpdateInboundShipmentLineResponse!
	deleteInboundShipmentLine(input: DeleteInboundShipmentLineInput!): DeleteInboundShipmentLineResponse!
	batchInboundShipment(insertInboundShipments: [InsertInboundShipmentInput!], insertInboundShipmentLines: [InsertInboundShipmentLineInput!], updateInboundShipmentLines: [UpdateInboundShipmentLineInput!], deleteInboundShipmentLines: [DeleteInboundShipmentLineInput!], updateInboundShipments: [UpdateInboundShipmentInput!], deleteInboundShipments: [DeleteInboundShipmentInput!]): BatchInboundShipmentResponse!
	batchOutboundShipment(insertOutboundShipments: [InsertOutboundShipmentInput!], insertOutboundShipmentLines: [InsertOutboundShipmentLineInput!], updateOutboundShipmentLines: [UpdateOutboundShipmentLineInput!], deleteOutboundShipmentLines: [DeleteOutboundShipmentLineInput!], updateOutboundShipments: [UpdateOutboundShipmentInput!], deleteOutboundShipments: [String!]): BatchOutboundShipmentResponse!
}
"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar NaiveDate
"""
Generic Connector
"""
type NameConnector {
	totalCount: Int!
	nodes: [NameNode!]!
}
input NameFilterInput {
	"""
	Filter by name
	"""
	name: SimpleStringFilterInput
	"""
	Filter by code
	"""
	code: SimpleStringFilterInput
	"""
	Filter by customer property
	"""
	isCustomer: Boolean
	"""
	Filter by supplier property
	"""
	isSupplier: Boolean
}
type NameNode {
	id: String!
	name: String!
	code: String!
	isCustomer: Boolean!
	isSupplier: Boolean!
}
union NameResponse = | NodeError | NameNode
enum NameSortFieldInput {
	name
	code
}
input NameSortInput {
	"""
	Sort query result by `key`
	"""
	key: NameSortFieldInput!
	"""
	Sort query result is sorted descending or ascending (if not provided the default is
ascending)
	"""
	desc: Boolean
}
union NamesResponse = | ConnectorError | NameConnector
type NoRefreshTokenProvided implements RefreshTokenErrorInterface {
	description: String!
}
"""
Generic Error Wrapper
"""
type NodeError {
	error: NodeErrorInterface!
}
interface NodeErrorInterface {
	description: String!
}
type NotARefreshToken implements RefreshTokenErrorInterface {
	description: String!
}
type NotAnInboundShipment implements InsertInboundShipmentLineErrorInterface & UpdateInboundShipmentLineErrorInterface & DeleteInboundShipmentLineErrorInterface & DeleteInboundShipmentErrorInterface & UpdateInboundShipmentErrorInterface {
	description: String!
}
type NotAnOutboundShipment implements UpdateOutboundShipmentLineErrorInterface & DeleteOutboundShipmentLineErrorInterface & DeleteOutboundShipmentErrorInterface & InsertOutboundShipmentLineErrorInterface {
	description: String!
}
type NotAnOutboundShipmentError implements UpdateOutboundShipmentErrorInterface {
	description: String!
}
type NotEnoughStockForReduction implements UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface {
	description: String!
	line: InvoiceLineResponse
	batch: StockLineResponse!
}
type OtherPartyCannotBeThisStoreError implements UpdateOutboundShipmentErrorInterface & InsertOutboundShipmentErrorInterface {
	description: String!
}
type OtherPartyNotACustomerError implements UpdateOutboundShipmentErrorInterface & InsertOutboundShipmentErrorInterface {
	description: String!
	otherParty: NameNode!
}
type OtherPartyNotASupplier implements UpdateInboundShipmentErrorInterface & InsertInboundShipmentErrorInterface {
	description: String!
	otherParty: NameNode!
}
type PaginationError implements ConnectorErrorInterface {
	description: String!
	rangeError: RangeError!
}
"""
Pagination input.

Option to limit the number of returned items and/or queries large lists in "pages".
"""
input PaginationInput {
	"""
	Max number of returned items
	"""
	first: Int
	"""
	First returned item is at the `offset` position in the full list
	"""
	offset: Int
}
type Queries {
	apiVersion: String!
	"""
	Retrieves a new auth bearer and refresh token
	The refresh token is returned as a cookie
	"""
	authToken(username: String!, password: String!): AuthTokenResponse!
	logout: LogoutResponse!
	"""
	Retrieves a new auth bearer and refresh token
	The refresh token is returned as a cookie
	"""
	refreshToken: RefreshTokenResponse!
	me: UserResponse!
	"""
	Query omSupply "name" entries
	"""
	names(page: PaginationInput, filter: NameFilterInput, sort: [NameSortInput!]): NamesResponse!
	"""
	Query omSupply "item" entries
	"""
	locations(page: PaginationInput, filter: LocationFilterInput, sort: [LocationSortInput!]): LocationsResponse!
	"""
	Query omSupply "item" entries
	"""
	items(page: PaginationInput, filter: ItemFilterInput, sort: [ItemSortInput!]): ItemsResponse!
	invoice(id: String!): InvoiceResponse!
	invoices(page: PaginationInput, filter: InvoiceFilterInput, sort: [InvoiceSortInput!]): InvoicesResponse!
}
type RangeError implements InsertInboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface & UpdateInboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface {
	description: String!
	field: RangeField!
	max: Int
	min: Int
}
enum RangeField {
	first
	numberOfPacks
	packSize
}
type RecordAlreadyExist implements InsertInboundShipmentErrorInterface & UserRegisterErrorInterface & InsertInboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface & InsertOutboundShipmentErrorInterface {
	description: String!
}
type RecordNotFound implements UpdateInboundShipmentErrorInterface & UpdateOutboundShipmentErrorInterface & NodeErrorInterface & DeleteOutboundShipmentErrorInterface & DeleteOutboundShipmentLineErrorInterface & DeleteInboundShipmentErrorInterface & UpdateInboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface & DeleteInboundShipmentLineErrorInterface {
	description: String!
}
type RefreshToken {
	"""
	New Bearer token
	"""
	token: String!
}
"""
Generic Error Wrapper
"""
type RefreshTokenError {
	error: RefreshTokenErrorInterface!
}
interface RefreshTokenErrorInterface {
	description: String!
}
union RefreshTokenResponse = | RefreshTokenError | RefreshToken
type RegisteredUser {
	id: String!
	username: String!
	email: String
}
input SimpleStringFilterInput {
	"""
	Search term must be an exact match (case sensitive)
	"""
	equalTo: String
	"""
	Search term must be included in search candidate (case insensitive)
	"""
	like: String
}
type StockLineAlreadyExistsInInvoice implements UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface {
	description: String!
	line: InvoiceLineResponse!
}
"""
Generic Connector
"""
type StockLineConnector {
	totalCount: Int!
	nodes: [StockLineNode!]!
}
type StockLineDoesNotBelongToCurrentStore implements UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface {
	description: String!
}
type StockLineIsOnHold implements InsertOutboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface {
	description: String!
}
type StockLineNode {
	id: String!
	itemId: String!
	storeId: String!
	batch: String
	packSize: Int!
	costPricePerPack: Float!
	sellPricePerPack: Float!
	availableNumberOfPacks: Int!
	totalNumberOfPacks: Int!
	expiryDate: NaiveDate
	onHold: Boolean!
	note: String
	locationId: String
	locationName: String
}
union StockLineResponse = | NodeError | StockLineNode
union StockLinesResponse = | ConnectorError | StockLineConnector
type TokenExpired implements RefreshTokenErrorInterface {
	description: String!
}
"""
Generic Error Wrapper
"""
type UpdateInboundShipmentError {
	error: UpdateInboundShipmentErrorInterface!
}
interface UpdateInboundShipmentErrorInterface {
	description: String!
}
input UpdateInboundShipmentInput {
	id: String!
	otherPartyId: String
	status: InvoiceNodeStatus
	onHold: Boolean
	comment: String
	theirReference: String
	color: String
}
"""
Generic Error Wrapper
"""
type UpdateInboundShipmentLineError {
	error: UpdateInboundShipmentLineErrorInterface!
}
interface UpdateInboundShipmentLineErrorInterface {
	description: String!
}
input UpdateInboundShipmentLineInput {
	id: String!
	invoiceId: String!
	itemId: String
	locationId: String
	packSize: Int
	batch: String
	costPricePerPack: Float
	sellPricePerPack: Float
	expiryDate: NaiveDate
	numberOfPacks: Int
}
union UpdateInboundShipmentLineResponse = | UpdateInboundShipmentLineError | NodeError | InvoiceLineNode
type UpdateInboundShipmentLineResponseWithId {
	id: String!
	response: UpdateInboundShipmentLineResponse!
}
union UpdateInboundShipmentResponse = | UpdateInboundShipmentError | NodeError | InvoiceNode
type UpdateInboundShipmentResponseWithId {
	id: String!
	response: UpdateInboundShipmentResponse!
}
"""
Generic Error Wrapper
"""
type UpdateOutboundShipmentError {
	error: UpdateOutboundShipmentErrorInterface!
}
interface UpdateOutboundShipmentErrorInterface {
	description: String!
}
input UpdateOutboundShipmentInput {
	"""
	The new invoice id provided by the client
	"""
	id: String!
	"""
	The other party must be a customer of the current store.
This field can be used to change the other_party of an invoice
	"""
	otherPartyId: String
	"""
	When changing the status from DRAFT to CONFIRMED or FINALISED the total_number_of_packs for
existing invoice items gets updated.
	"""
	status: InvoiceNodeStatus
	onHold: Boolean
	comment: String
	"""
	External invoice reference, e.g. purchase or shipment number
	"""
	theirReference: String
	color: String
}
"""
Generic Error Wrapper
"""
type UpdateOutboundShipmentLineError {
	error: UpdateOutboundShipmentLineErrorInterface!
}
interface UpdateOutboundShipmentLineErrorInterface {
	description: String!
}
input UpdateOutboundShipmentLineInput {
	id: String!
	invoiceId: String!
	itemId: String
	stockLineId: String
	numberOfPacks: Int
}
union UpdateOutboundShipmentLineResponse = | UpdateOutboundShipmentLineError | NodeError | InvoiceLineNode
type UpdateOutboundShipmentLineResponseWithId {
	id: String!
	response: UpdateOutboundShipmentLineResponse!
}
union UpdateOutboundShipmentResponse = | UpdateOutboundShipmentError | NodeError | InvoiceNode
type UpdateOutboundShipmentResponseWithId {
	id: String!
	response: UpdateOutboundShipmentResponse!
}
type User {
	"""
	Internal user id
	"""
	userId: String!
	"""
	The user's email address
	"""
	email: String
}
"""
Generic Error Wrapper
"""
type UserError {
	error: UserErrorInterface!
}
interface UserErrorInterface {
	description: String!
}
type UserNameDoesNotExist implements AuthTokenErrorInterface {
	description: String!
}
"""
Generic Error Wrapper
"""
type UserRegisterError {
	error: UserRegisterErrorInterface!
}
interface UserRegisterErrorInterface {
	description: String!
}
input UserRegisterInput {
	username: String!
	password: String!
	email: String
}
union UserRegisterResponse = | UserRegisterError | RegisteredUser
union UserResponse = | UserError | User
schema {
	query: Queries
	mutation: Mutations
}
