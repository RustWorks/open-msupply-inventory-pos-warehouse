fragment AssetCatalogueItem on AssetCatalogueItemNode {
  __typename
  assetCategoryId
  assetClassId
  assetTypeId
  code
  id
  manufacturer
  model
  assetClass {
    name
  }
  assetCategory {
    name
  }
  assetType {
    name
  }
}

fragment AssetLog on AssetLogNode {
  comment
  id
  logDatetime
  reason {
    reason
  }
  status
  type
  user {
    firstName
    lastName
    username
    jobTitle
  }
}

fragment AssetLogReason on AssetLogReasonNode {
  id
  assetLogStatus
  reason
}

query assetCatalogueItems(
  $first: Int
  $offset: Int
  $key: AssetCatalogueItemSortFieldInput!
  $desc: Boolean
  $filter: ItemFilterInput
) {
  assetCatalogueItems(
    page: { first: $first, offset: $offset }
    sort: { key: $key, desc: $desc }
    filter: $filter
  ) {
    ... on AssetCatalogueItemConnector {
      __typename
      nodes {
        ...AssetCatalogueItem
      }
      totalCount
    }
  }
}

query assetCatalogueItemById($assetCatalogueItemId: String!) {
  assetCatalogueItems(filter: { id: { equalTo: $assetCatalogueItemId } }) {
    ... on AssetCatalogueItemConnector {
      __typename
      nodes {
        __typename
        ...AssetCatalogueItem
      }
      totalCount
    }
  }
}

query assetClasses($sort: AssetClassSortInput) {
  assetClasses(sort: $sort) {
    ... on AssetClassConnector {
      nodes {
        id
        name
      }
      totalCount
    }
  }
}

query assetTypes($sort: AssetTypeSortInput, $filter: AssetTypeFilterInput) {
  assetTypes(sort: $sort, filter: $filter) {
    ... on AssetTypeConnector {
      nodes {
        id
        name
        categoryId
      }
      totalCount
    }
  }
}

query assetCategories(
  $sort: AssetCategorySortInput
  $filter: AssetCategoryFilterInput
) {
  assetCategories(sort: $sort, filter: $filter) {
    ... on AssetCategoryConnector {
      nodes {
        id
        name
        classId
      }
      totalCount
    }
  }
}

query assetLogReasons(
  $filter: AssetLogReasonFilterInput!
  $sort: AssetLogReasonSortInput
  $storeId: String!
) {
  assetLogReasons(filter: $filter, sort: $sort, storeId: $storeId) {
    ... on AssetLogReasonConnector {
      __typename
      totalCount
      nodes {
        __typename
        ...AssetLogReason
      }
    }
  }
}

mutation insertAssetLogReason($input: InsertAssetLogReasonInput!) {
  insertAssetLogReason(input: $input, storeId: $storeId) {
    ... on AssetLogReasonNode {
      __typename
      id
      reason
    }
    ... on InsertAssetLogReasonError {
      __typename
      error {
        description
      }
    }
  }
}
