fragment Document on DocumentNode {
  id
  name
  parents
  author
  timestamp
  type
  data
  documentRegistry {
    uiSchemaType
    documentType
    context
    formSchemaId
    jsonSchema
    uiSchema
  }
}

fragment ProgramRow on ProgramNode {
  enrolmentDatetime
  name
  patientId
  programPatientId
  type
  schema {
    jsonSchema
    id
  }
}

fragment Program on ProgramNode {
  type
  programPatientId
  patientId
  name
  enrolmentDatetime
  document {
    ...Document
  }
}

query programs(
  $storeId: String!
  $key: ProgramSortFieldInput!
  $desc: Boolean
  $filter: ProgramFilterInput
) {
  programs(
    storeId: $storeId
    sort: { key: $key, desc: $desc }
    filter: $filter
  ) {
    ... on ProgramConnector {
      __typename
      nodes {
        ...ProgramRow
      }
      totalCount
    }
  }
}

query programById($storeId: String!, $programId: String!) {
  programs(storeId: $storeId, filter: { id: { equalTo: $programId } }) {
    ... on ProgramConnector {
      __typename
      nodes {
        ...Program
      }
      totalCount
    }
  }
}

mutation insertProgram($storeId: String!, $input: InsertProgramInput!) {
  insertProgram(storeId: $storeId, input: $input) {
    ... on DocumentNode {
      __typename
      ...Document
    }
  }
}

mutation updateProgram($storeId: String!, $input: UpdateProgramInput!) {
  updateProgram(storeId: $storeId, input: $input) {
    ... on DocumentNode {
      __typename
      ...Document
    }
  }
}
