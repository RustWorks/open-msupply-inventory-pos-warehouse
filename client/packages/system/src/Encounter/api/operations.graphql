fragment EncounterRow on EncounterNode {
  id
  document {
    documentRegistry {
      name
    }
  }
  program
  startDatetime
  endDatetime
  status
  name
  type
  patient {
    id
    firstName
    lastName
    name
  }
  events(filter: { datetime: { beforeOrEqualTo: $latestEventTime } }) {
    ...ProgramEvent
  }
}

fragment ProgramEvent on ProgramEventNode {
  datetime
  name
  type
}

fragment EncounterDocumentRegistry on DocumentRegistryNode {
  context
  documentType
  formSchemaId
  id
  jsonSchema
  name
  parentId
  uiSchema
  uiSchemaType
  children {
    id
  }
}

fragment EncounterDocument on DocumentNode {
  id
  name
  parents
  author
  timestamp
  type
  data
  documentRegistry {
    ...EncounterDocumentRegistry
  }
}

fragment Encounter on EncounterNode {
  type
  name
  status
  patient {
    id
    firstName
    lastName
    name
  }
  program
  startDatetime
  endDatetime
  document {
    ...EncounterDocument
  }
}

query encounters(
  $storeId: String!
  $key: EncounterSortFieldInput
  $desc: Boolean
  $filter: EncounterFilterInput
  $page: PaginationInput
  $latestEventTime: String!
) {
  encounters(
    storeId: $storeId
    sort: { key: $key, desc: $desc }
    filter: $filter
    page: $page
  ) {
    ... on EncounterConnector {
      nodes {
        ...EncounterRow
      }
      totalCount
    }
  }
}

query encounterDocumentRegistries($filter: DocumentRegistryFilterInput) {
  documentRegistries(filter: $filter) {
    ... on DocumentRegistryConnector {
      nodes {
        ...EncounterDocumentRegistry
      }
      totalCount
    }
  }
}

query encounterById($storeId: String!, $encounterId: String!) {
  encounters(storeId: $storeId, filter: { id: { equalTo: $encounterId } }) {
    ... on EncounterConnector {
      __typename
      nodes {
        ...Encounter
      }
      totalCount
    }
  }
}

mutation insertEncounter($storeId: String!, $input: InsertEncounterInput!) {
  insertEncounter(storeId: $storeId, input: $input) {
    ... on DocumentNode {
      __typename
      ...EncounterDocument
    }
  }
}

mutation updateEncounter($storeId: String!, $input: UpdateEncounterInput!) {
  updateEncounter(storeId: $storeId, input: $input) {
    ... on DocumentNode {
      __typename
      ...EncounterDocument
    }
  }
}
